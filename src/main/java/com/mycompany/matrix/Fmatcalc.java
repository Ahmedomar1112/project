package com.mycompany.matrix;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author AhmedOmar
 */
public class Fmatcalc extends javax.swing.JFrame {

    /**
     *
     */
    @SuppressWarnings({"FieldNameHidesFieldInSuperclass", "FieldNameHidesFieldInSuperclass"})
    private double[][] matrix;

    /**
     * Creates new form Fmatcalc
     */
    public Fmatcalc() {
        initComponents();
        applyHighlightShadow(lgninfo);
        applyHighlightShadow(infobtn);
        
    }
    
    
    // تعريف دالة خاصة لتطبيق تأثيرات highlight و shadow على الأزرار
private void applyHighlightShadow(JButton button) {
    button.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createRaisedBevelBorder()); // تأثير الهايلايت
        }

        @Override
        public void mouseExited(java.awt.event.MouseEvent evt) {
            button.setBorder(null); // إزالة التأثير عند الخروج
        }

        @Override
        public void mousePressed(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createLoweredBevelBorder()); // تأثير shadow عند الضغط
        }

        @Override
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createRaisedBevelBorder()); // إعادة تأثير الهايلايت عند الإفراج
        }
    });
}

// في نهاية initComponents() استدعي الدالة للأزرار


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parent = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        infobtn = new javax.swing.JButton();
        lgninfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mainpanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        createmat = new javax.swing.JButton();
        createmat1 = new javax.swing.JButton();
        Ope = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        parent.setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infobtn.setBackground(new java.awt.Color(102, 102, 102));
        infobtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        infobtn.setText("معلومات حول البرنامج");
        infobtn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                infobtnMouseWheelMoved(evt);
            }
        });
        infobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infobtnActionPerformed(evt);
            }
        });
        jPanel1.add(infobtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 150, 50));

        lgninfo = new JButton();
        lgninfo.setBackground(new java.awt.Color(102, 102, 102));
        lgninfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lgninfo.setText("الدخول الي البرنامج");
        lgninfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgninfoActionPerformed(evt);
            }
        });
        jPanel1.add(lgninfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 150, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\EL-Hussein Store\\OneDrive\\Documents\\NetBeansProjects\\matrix\\src\\main\\java\\56371c2987f7a8739b7280567e205c94.jpg"));
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 400));

        parent.add(jPanel1, "card4");

        mainpanel.setBackground(new java.awt.Color(0, 0, 0));
        mainpanel.setName("Matrices Solver"); // NOI18N

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 153, 0));
        jButton1.setText("عرض المصفوفه");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 153, 0));
        jButton2.setText("قيمة المصفوفه");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 153, 0));
        jButton3.setText("العمليات الحسابيه علي المصفوفه");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 153, 0));
        jButton4.setText("حل المعادلات الرياضيه");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        createmat.setBackground(new java.awt.Color(204, 102, 0));
        createmat.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        createmat.setText("انشاء مصفوفه");
        createmat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creatematActionPerformed(evt);
            }
        });

        createmat1.setBackground(new java.awt.Color(0, 0, 0));
        createmat1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        createmat1.setForeground(new java.awt.Color(255, 153, 0));
        createmat1.setText("الحافظه");
        createmat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createmat1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainpanelLayout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(mainpanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainpanelLayout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(24, 24, 24)))
                                .addGap(10, 10, 10))))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainpanelLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(createmat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(mainpanelLayout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(createmat1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(29, 29, 29)))
                        .addGap(71, 71, 71)))
                .addContainerGap())
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createmat, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createmat1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );

        parent.add(mainpanel, "card2");

        Ope.setBackground(new java.awt.Color(0, 0, 0));

        jButton10.setBackground(new java.awt.Color(0, 0, 0));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 153, 0));
        jButton10.setText("قسمة المصفوفه في عدد ");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(0, 0, 0));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 153, 0));
        jButton11.setText("معكوس المصفوفه");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(153, 0, 0));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 153, 0));
        jButton12.setText("رجوع");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 153, 0));
        jButton5.setText("جمع عدد من المصفوفات");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 153, 0));
        jButton6.setText("ضرب مصفوفتين");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 153, 0));
        jButton7.setText("طرح عدد من المصفوفات");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 153, 0));
        jButton8.setText("مقلوب المصفوفه");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 0, 0));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 153, 0));
        jButton9.setText("ضرب المصفوفه في عدد ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OpeLayout = new javax.swing.GroupLayout(Ope);
        Ope.setLayout(OpeLayout);
        OpeLayout.setHorizontalGroup(
            OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OpeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(OpeLayout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                    .addGroup(OpeLayout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)))
                .addContainerGap())
        );
        OpeLayout.setVerticalGroup(
            OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OpeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        parent.add(Ope, "card3");

        getContentPane().add(parent, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // إعلان المصفوفة كمتغير عام داخل الصف
//public double[][] matrix;

private void openMatrixInputDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowField = new JTextField(6);
    JTextField colField = new JTextField(6);
    JButton generateButton = new JButton("انشاء المصفوفه");
    panel.add(new JLabel("عدد الصفوف:"));
    panel.add(rowField);
    panel.add(new JLabel("عدد الأعمدة:"));
    panel.add(colField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفه");
    inputFrame.setSize(300, 200);
    inputFrame.add(panel);
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowField.getText());
                int cols = Integer.parseInt(colField.getText());
                inputFrame.dispose();
                openMatrixPanel(rows, cols);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة للصفوف والأعمدة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixPanel(int rows, int cols) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(400, 400);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    matrix = new double[rows][cols]; // تخصيص الحجم للمصفوفة العامة هنا

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("انشاء");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                JOptionPane.showMessageDialog(matrixFrame, "تم إنشاء المصفوفة بنجاح!");
                matrixFrame.dispose(); // إغلاق نافذة إدخال القيم
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط في حقول المصفوفة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setVisible(true);
}

private void displayMatrix() {
    if (matrix == null) {
        JOptionPane.showMessageDialog(this, "لم يتم إنشاء أي مصفوفة بعد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // تحويل المصفوفة إلى نص لعرضه في JTextArea
    StringBuilder matrixText = new StringBuilder();
    for (double[] row : matrix) {
        for (double val : row) {
            matrixText.append(val).append("   ");
        }
        matrixText.append("\n");
    }

    // إعداد JTextArea لعرض المصفوفة
    JTextArea textArea = new JTextArea(matrixText.toString());
    textArea.setEditable(false);
    textArea.setBackground(Color.BLACK);  // خلفية JTextArea سوداء
    textArea.setForeground(Color.WHITE);   // لون النص أبيض لجعله واضحاً

    JScrollPane scrollPane = new JScrollPane(textArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    // إعداد أزرار "تعديل" و"حفظ" بخلفية سوداء ولون نص برتقالي
    JButton editButton = new JButton("تعديل");
    JButton saveButton = new JButton("حفظ");
    saveButton.setEnabled(false);  // يتم تعطيل زر الحفظ في البداية

    // إعداد لون خلفية الأزرار إلى أسود ولون النص إلى برتقالي
    Color buttonTextColor = new Color(255, 153, 0);
    editButton.setBackground(Color.BLACK);
    editButton.setForeground(buttonTextColor);
    saveButton.setBackground(Color.BLACK);
    saveButton.setForeground(buttonTextColor);

    // ActionListener لزر التعديل
    editButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            textArea.setEditable(true);  // تمكين التعديل في JTextArea
            saveButton.setEnabled(true);  // تفعيل زر الحفظ
            editButton.setEnabled(false);  // تعطيل زر التعديل أثناء التعديل
        }
    });

    // ActionListener لزر الحفظ
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                String[] rows = textArea.getText().split("\\n");
                for (int i = 0; i < matrix.length; i++) {
                    String[] values = rows[i].trim().split("\\s+");
                    for (int j = 0; j < matrix[i].length; j++) {
                        matrix[i][j] = Double.parseDouble(values[j]);
                    }
                }
                JOptionPane.showMessageDialog(null, "تم تحديث المصفوفة بنجاح!", "نجاح", JOptionPane.INFORMATION_MESSAGE);
                textArea.setEditable(false);  // تعطيل التعديل بعد الحفظ
                saveButton.setEnabled(false);  // تعطيل زر الحفظ بعد الحفظ
                editButton.setEnabled(true);  // تفعيل زر التعديل من جديد
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "خطأ في تنسيق الإدخال. يرجى التأكد من القيم.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // إعداد النافذة مع النص وزر التعديل والحفظ
    JPanel buttonPanel = new JPanel();
    buttonPanel.setBackground(Color.BLACK); // خلفية JPanel الخاصة بالأزرار سوداء
    buttonPanel.add(editButton);
    buttonPanel.add(saveButton);

    JPanel panel = new JPanel(new BorderLayout());
    panel.setBackground(Color.BLACK);  // خلفية JPanel الأساسية سوداء
    panel.add(scrollPane, BorderLayout.CENTER);
    panel.add(buttonPanel, BorderLayout.SOUTH);

    JOptionPane.showMessageDialog(this, panel, "عرض وتعديل المصفوفة", JOptionPane.INFORMATION_MESSAGE);
}




/////////////////////////////////////////////////////////////
private void calculateAndDisplayDeterminant() {
    if (matrix == null) {
        JOptionPane.showMessageDialog(this, "لم يتم إنشاء أي مصفوفة بعد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int rows = matrix.length;
    int cols = matrix[0].length;
    
    if (rows != cols) {
        JOptionPane.showMessageDialog(this, "المصفوفة يجب أن تكون مربعة لحساب المحدد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    double determinant = calculateDeterminant(matrix);

    // إعداد النص الذي يظهر قيمة المحدد
    String message = "قيمة المحدد هي:\n" + determinant;
    JTextArea messageText = new JTextArea(message);
    messageText.setEditable(false);
    messageText.setBackground(Color.BLACK); // خلفية سوداء
    messageText.setForeground(new Color(255, 153, 0)); // لون النص برتقالي
    messageText.setFont(new Font("Arial", Font.BOLD, 24)); // نص بحجم 24 و Bold
    messageText.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); // محاذاة النص من اليمين

    // إعداد JScrollPane لتكبير حجم الرسالة
    JScrollPane scrollPane = new JScrollPane(messageText);
    scrollPane.setPreferredSize(new Dimension(400, 200)); // تكبير حجم النافذة

    // إعداد JPanel الأساسية
    JPanel panel = new JPanel(new BorderLayout());
    panel.setBackground(Color.BLACK); // خلفية JPanel سوداء
    panel.add(scrollPane, BorderLayout.CENTER);

    // عرض الرسالة في JOptionPane
    JOptionPane.showMessageDialog(this, panel, "قيمة المحدد", JOptionPane.INFORMATION_MESSAGE);
}




private double calculateDeterminant(double[][] matrix) {
    int n = matrix.length;
    if (n == 1) {
        return matrix[0][0];
    }
    if (n == 2) {
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    }
    
    double determinant = 0;
    for (int i = 0; i < n; i++) {
        determinant += Math.pow(-1, i) * matrix[0][i] * calculateDeterminant(getMinor(matrix, 0, i));
    }
    return determinant;
}

private double[][] getMinor(double[][] matrix, int row, int col) {
    int n = matrix.length;
    double[][] minor = new double[n - 1][n - 1];
    
    for (int i = 0, mi = 0; i < n; i++) {
        if (i == row) continue;
        for (int j = 0, mj = 0; j < n; j++) {
            if (j == col) continue;
            minor[mi][mj++] = matrix[i][j];
        }
        mi++;
    }
    
    return minor;
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////





    private void creatematActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creatematActionPerformed
        openMatrixInputDialog();
    }//GEN-LAST:event_creatematActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        displayMatrix();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        calculateAndDisplayDeterminant();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    
    private void openEquationSolver() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField variableCountField = new JTextField(3); // تصغير حجم النص

    JButton proceedButton = new JButton("التالي");
    proceedButton.setPreferredSize(new Dimension(160, 50)); // حجم الزر الضعف
    proceedButton.setBackground(Color.BLACK); // لون الزر أسود
    proceedButton.setForeground(Color.decode("#FFD700")); // النص على الزر باللون الذهبي

    panel.add(new JLabel("عدد المتغيرات (2 أو 3):"));
    panel.add(variableCountField);
    panel.add(proceedButton);

    JFrame variableFrame = new JFrame("حل المعادلات الرياضية");
    variableFrame.setSize(300, 200);
    variableFrame.setLocationRelativeTo(null); // إظهار النافذة في منتصف الشاشة
    variableFrame.add(panel);
    variableFrame.setVisible(true);

    proceedButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int variableCount = Integer.parseInt(variableCountField.getText());
                if (variableCount < 2 || variableCount > 3) {
                    throw new NumberFormatException();
                }
                variableFrame.dispose();
                openCoefficientInput(variableCount);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح من المتغيرات (2 أو 3)", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openCoefficientInput(int variableCount) {
    JFrame coeffFrame = new JFrame("إدخال المعاملات");
    coeffFrame.setSize(400, 400);
    coeffFrame.setLocationRelativeTo(null); // إظهار النافذة في منتصف الشاشة

    JPanel coeffPanel = new JPanel(new GridLayout(variableCount, variableCount + 2, 5, 5));
    JTextField[][] coeffFields = new JTextField[variableCount][variableCount + 1];

    for (int i = 0; i < variableCount; i++) {
        for (int j = 0; j < variableCount; j++) {
            coeffFields[i][j] = new JTextField(3);
            coeffFields[i][j].setPreferredSize(new Dimension(50, 20)); // تصغير الحجم إلى النصف تقريباً
            coeffPanel.add(coeffFields[i][j]);
        }

        JLabel equalsLabel = new JLabel(" = ");
        equalsLabel.setForeground(Color.BLACK);
        coeffPanel.add(equalsLabel);

        coeffFields[i][variableCount] = new JTextField(3);
        coeffFields[i][variableCount].setPreferredSize(new Dimension(50, 20)); // تصغير الحجم إلى النصف تقريباً
        coeffPanel.add(coeffFields[i][variableCount]);
    }

    JButton solveButton = new JButton("حل");
    solveButton.setPreferredSize(new Dimension(160, 50)); // حجم الزر الضعف
    solveButton.setBackground(Color.BLACK); // لون الزر أسود
    solveButton.setForeground(Color.decode("#FFD700")); // النص باللون الذهبي
    
    JButton homogeneousSolveButton = new JButton("حل كنظام متجانس");
    homogeneousSolveButton.setPreferredSize(new Dimension(160, 50)); // حجم الزر الضعف
    homogeneousSolveButton.setBackground(Color.BLACK); // لون الزر أسود
    homogeneousSolveButton.setForeground(Color.decode("#FFD700")); // النص باللون الذهبي

    coeffFrame.add(coeffPanel, BorderLayout.CENTER);

    JPanel buttonPanel = new JPanel(new FlowLayout());
    buttonPanel.add(solveButton);
    buttonPanel.add(homogeneousSolveButton);

    coeffFrame.add(buttonPanel, BorderLayout.SOUTH);
    coeffFrame.setVisible(true);

    // ActionListener لزر الحل العادي
    solveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] coefficients = new double[variableCount][variableCount];
            double[] constants = new double[variableCount];

            try {
                // قراءة المدخلات من الحقول
                for (int i = 0; i < variableCount; i++) {
                    for (int j = 0; j < variableCount; j++) {
                        coefficients[i][j] = Double.parseDouble(coeffFields[i][j].getText());
                    }
                    constants[i] = Double.parseDouble(coeffFields[i][variableCount].getText());
                }

                // حل النظام
                double[] solution = solveEquations(coefficients, constants);

                // عرض الحل
                StringBuilder result = new StringBuilder("الحل:\n");
                for (int i = 0; i < solution.length; i++) {
                    result.append("x").append(i + 1).append(" = ").append(solution[i]).append("\n");
                }
                JOptionPane.showMessageDialog(null, result.toString(), "حل النظام", JOptionPane.INFORMATION_MESSAGE);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أعداد صحيحة أو عشرية صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // ActionListener لزر الحل المتجانس
    homogeneousSolveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] coefficients = new double[variableCount][variableCount];

            try {
                // قراءة المدخلات من الحقول
                for (int i = 0; i < variableCount; i++) {
                    for (int j = 0; j < variableCount; j++) {
                        coefficients[i][j] = Double.parseDouble(coeffFields[i][j].getText());
                    }
                }

                // حل النظام المتجانس
                double[] solution = solveHomogeneousEquations(coefficients);

                // عرض الحل
                StringBuilder result = new StringBuilder("الحل المتجانس:\n");
                for (int i = 0; i < solution.length; i++) {
                    result.append("x").append(i + 1).append(" = ").append(solution[i]).append("\n");
                }
                JOptionPane.showMessageDialog(null, result.toString(), "حل النظام المتجانس", JOptionPane.INFORMATION_MESSAGE);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أعداد صحيحة أو عشرية صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}




private double[] solveEquations(double[][] coefficients, double[] constants) {
    int n = coefficients.length;
    double[][] augmentedMatrix = new double[n][n + 1];

    // بناء المصفوفة الموسعة
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            augmentedMatrix[i][j] = coefficients[i][j];
        }
        augmentedMatrix[i][n] = constants[i]; // إضافة الثوابت
    }

    // تطبيق طريقة جاوس-جوردان
    for (int i = 0; i < n; i++) {
        // تحقق من أن العنصر القطرى غير صفر
        if (augmentedMatrix[i][i] == 0) {
            // إذا كان العنصر القطرى صفرًا، يجب تبديل الصفوف
            boolean swapped = false;
            for (int k = i + 1; k < n; k++) {
                if (augmentedMatrix[k][i] != 0) {
                    double[] temp = augmentedMatrix[i];
                    augmentedMatrix[i] = augmentedMatrix[k];
                    augmentedMatrix[k] = temp;
                    swapped = true;
                    break;
                }
            }
            if (!swapped) {
                // إذا لم يتم العثور على صف لتبديله، فإن النظام ليس له حل
                return new double[n]; // أو يمكنك إرجاع NaN أو أي قيمة تشير إلى عدم وجود حل
            }
        }

        // جعل العنصر القطرى يساوي 1
        double diagElement = augmentedMatrix[i][i];
        for (int j = 0; j <= n; j++) {
            augmentedMatrix[i][j] /= diagElement;
        }

        // جعل العناصر الأخرى في العمود الحالي تساوي 0
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = augmentedMatrix[k][i];
                for (int j = 0; j <= n; j++) {
                    augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
                }
            }
        }
    }

    // استخراج الحلول
    double[] solution = new double[n];
    for (int i = 0; i < n; i++) {
        solution[i] = augmentedMatrix[i][n];
    }

    return solution;
}


private double[] solveHomogeneousEquations(double[][] coefficients) {
    int n = coefficients.length;
    double[][] augmentedMatrix = new double[n][n + 1];

    // بناء المصفوفة الموسعة مع افتراض الثوابت تساوي صفرًا
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            augmentedMatrix[i][j] = coefficients[i][j];
        }
        augmentedMatrix[i][n] = 0; // الثوابت تساوي صفرًا
    }

    // حل النظام باستخدام طريقة جاوس-جوردان
    for (int i = 0; i < n; i++) {
        double diagElement = augmentedMatrix[i][i];
        if (diagElement == 0) continue;

        for (int j = 0; j <= n; j++) {
            augmentedMatrix[i][j] /= diagElement;
        }

        for (int k = i + 1; k < n; k++) {
            double factor = augmentedMatrix[k][i];
            for (int j = 0; j <= n; j++) {
                augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
            }
        }
    }

    double[] solution = new double[n];
    for (int i = n - 1; i >= 0; i--) {
        solution[i] = augmentedMatrix[i][n];
        for (int j = i + 1; j < n; j++) {
            solution[i] -= augmentedMatrix[i][j] * solution[j];
        }
    }

    return solution;
}


    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        openEquationSolver();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void createmat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createmat1ActionPerformed
        
    }//GEN-LAST:event_createmat1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        parent.removeAll();
        parent.add(Ope);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void openMatrixInputDialogForDivision() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(6);
    JTextField colsField = new JTextField(6);
    JTextField divisorField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل عدد الصفوف:"));
    panel.add(rowsField);
    panel.add(new JLabel("أدخل عدد الأعمدة:"));
    panel.add(colsField);
    panel.add(new JLabel("أدخل العدد للقسمة عليه:"));
    panel.add(divisorField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowsField.getText());
                int cols = Integer.parseInt(colsField.getText());
                double divisor = Double.parseDouble(divisorField.getText());
                inputFrame.dispose();
                openMatrixPanelForDivision(rows, cols, divisor);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixPanelForDivision(int rows, int cols, double divisor) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    matrix = new double[rows][cols]; // تهيئة المصفوفة المحفوظة الجديدة

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ المصفوفة");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                double[][] resultMatrix = divideMatrixByScalar(matrix, divisor);
                displayResultMatrix3(resultMatrix);
                matrixFrame.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    matrixFrame.setVisible(true);
}

private void askForModificationOrDivisor() {
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(null, "هل تريد تعديل المصفوفة الحالية؟", "تعديل المصفوفة", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            openMatrixPanelForModification1();
        } else {
            askForDivisor();
        }
    } else {
        JOptionPane.showMessageDialog(null, "لا توجد مصفوفة محفوظة. يرجى إنشاء مصفوفة جديدة.");
        openMatrixInputDialogForDivision();
    }
}

private void openMatrixPanelForModification1() {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame matrixFrame = new JFrame("تعديل القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(String.valueOf(matrix[i][j]), 5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ التعديلات");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                matrixFrame.dispose();
                askForDivisor();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void askForDivisor() {
    try {
        double divisor = Double.parseDouble(JOptionPane.showInputDialog("أدخل العدد للقسمة عليه:"));
        double[][] resultMatrix = divideMatrixByScalar(matrix, divisor);
        displayResultMatrix3(resultMatrix);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
    }
}

private double[][] divideMatrixByScalar(double[][] matrix, double scalar) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    double[][] resultMatrix = new double[rows][cols];
    if (scalar == 0) {
        JOptionPane.showMessageDialog(null, "لا يمكن القسمة على الصفر.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return resultMatrix; // العودة إلى مصفوفة فارغة إذا كانت القسمة على صفر
    }
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            resultMatrix[i][j] = matrix[i][j] / scalar;
        }
    }
    return resultMatrix;
}

private void displayResultMatrix3(double[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame resultFrame = new JFrame("نتيجة القسمة");
    resultFrame.setSize(500, 500);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(matrix[i][j]));
            resultField.setEditable(false);
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null);
    resultFrame.setVisible(true);
}
    
    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
    JButton newMatrixButton = new JButton("إنشاء مصفوفة جديدة");
    JButton existingMatrixButton = new JButton("استخدام المصفوفة الموجودة");

    panel.add(newMatrixButton);
    panel.add(existingMatrixButton);

    JFrame choiceFrame = new JFrame("اختيار المصفوفة");
    choiceFrame.setSize(300, 150);
    choiceFrame.add(panel);
    choiceFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    choiceFrame.setVisible(true);

    // إذا اختار إنشاء مصفوفة جديدة
    newMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            openMatrixInputDialogForDivision(); // فتح نافذة إدخال حجم المصفوفة
        }
    });

    // إذا اختار استخدام المصفوفة الموجودة
    existingMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            if (matrix == null) {
                JOptionPane.showMessageDialog(null, "لا يوجد مصفوفة محفوظة. يُرجى إنشاء مصفوفة جديدة.");
                openMatrixInputDialogForDivision();
            } else {
                displayMatrix();
                askForModificationOrDivisor(); // سؤال المستخدم
            }
        }
    });
    }//GEN-LAST:event_jButton10ActionPerformed

    // دالة لعرض الخيارات
private void showMatrixOptionsDialog() {
    // إعداد الخيارين
    String[] options = {"العمل على المصفوفة الحالية", "إنشاء مصفوفة جديدة"};
    int choice = JOptionPane.showOptionDialog(
            this,
            "اختر الخيار الذي ترغب فيه:",
            "اختيار المصفوفة",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
    );

    // تنفيذ الإجراء بناءً على الخيار
    if (choice == 0) {
        // العمل على المصفوفة الحالية
        if (matrix != null) {
            try {
                double[][] invertedMatrix = invertMatrix(matrix);
                displayResultMatrix(invertedMatrix);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة وغير مفردة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "لا توجد مصفوفة حالية.", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    } else if (choice == 1) {
        // إنشاء مصفوفة جديدة
        openMatrixInputForInversionDialog();
    }
}

// دالة إدخال حجم وقيم المصفوفة الجديدة
private void openMatrixInputForInversionDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField sizeField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل حجم المصفوفة (مربعة):"));
    panel.add(sizeField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int size = Integer.parseInt(sizeField.getText());
                inputFrame.dispose();
                openMatrixPanelForInversion(size);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال رقم صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

// دالة إدخال قيم المصفوفة الجديدة وحساب مقلوبها
private void openMatrixPanelForInversion(int size) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(size, size, 5, 5));
    JTextField[][] matrixFields = new JTextField[size][size];
    double[][] newMatrix = new double[size][size];

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton invertButton = new JButton("احصل على المقلوب");
    invertButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < size; i++) {
                    for (int j = 0; j < size; j++) {
                        newMatrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                double[][] invertedMatrix = invertMatrix(newMatrix);
                displayResultMatrix(invertedMatrix);
                matrixFrame.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(matrixFrame, "لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة وغير مفردة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(invertButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    matrixFrame.setVisible(true);
}

// دالة عرض النتيجة
private void displaySumMatrix(double[][] sumMatrix) {
    int rows = sumMatrix.length;
    int cols = sumMatrix[0].length;
    StringBuilder resultText = new StringBuilder("مصفوفة الناتج:\n");
    for (double[] row : sumMatrix) {
        for (double val : row) {
            resultText.append(String.format("%8.2f", val)).append(" ");
        }
        resultText.append("\n");
    }

    JTextArea resultArea = new JTextArea(resultText.toString());
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);

    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    JPanel resultPanel = new JPanel(new BorderLayout());
    resultPanel.setBackground(Color.BLACK);
    resultPanel.add(scrollPane, BorderLayout.CENTER);

    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new FlowLayout());

    // إنشاء إطار رسائل قابل للإغلاق
    JDialog dialog = new JOptionPane(resultPanel, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION).createDialog(this, "مصفوفة الناتج");
    dialog.setSize(400, 300);

    // زر لحساب المحدد إذا كانت المصفوفة مربعة
    if (rows == cols) {
        JButton determinantButton = new JButton("احسب المحدد");
        determinantButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                double determinant = calculateDeterminant9(sumMatrix);
                showResult("قيمة المحدد هي: " + determinant, "المحدد"); // عرض نافذة جديدة بالنتيجة
            }
        });
        buttonPanel.add(determinantButton);

        // زر لحساب المصفوفة المعكوسة (يظهر فقط إذا كانت المصفوفة مربعة)
        JButton inverseButton = new JButton("احسب المعكوس");
        inverseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    double[][] inverseMatrix = invertMatrix0(sumMatrix);
                    dialog.dispose(); // إغلاق النافذة الحالية
                    displaySumMatrix(inverseMatrix); // عرض نافذة جديدة بالمصفوفة المعكوسة
                } catch (ArithmeticException ex) {
                    dialog.dispose(); // إغلاق النافذة الحالية
                    showErrorMessage("لا يمكن حساب المعكوس. المحدد يساوي صفر."); // عرض رسالة خطأ
                }
            }
        });
        buttonPanel.add(inverseButton); // إضافة زر المعكوس إلى لوحة الأزرار
    }

    // زر لحساب المصفوفة المنقولة
    JButton transposeButton = new JButton("احسب المنقول");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] transposedMatrix = transposeMatrix0(sumMatrix);
            dialog.dispose(); // إغلاق النافذة الحالية
            displaySumMatrix(transposedMatrix); // عرض نافذة جديدة بالمصفوفة المنقولة
        }
    });
    buttonPanel.add(transposeButton);

    resultPanel.add(buttonPanel, BorderLayout.SOUTH);
    dialog.setVisible(true); // عرض النافذة الحالية
}


private double[][] transposeMatrix(double[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    double[][] transposedMatrix = new double[cols][rows];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }
    return transposedMatrix;
}

// دالة لحساب المحدد
private double calculateDeterminant2(double[][] matrix) {
    int n = matrix.length;
    if (n == 1) return matrix[0][0];

    double determinant = 0;
    for (int i = 0; i < n; i++) {
        double[][] minor = new double[n - 1][n - 1];
        for (int j = 1; j < n; j++) {
            for (int k = 0, col = 0; k < n; k++) {
                if (k != i) {
                    minor[j - 1][col++] = matrix[j][k];
                }
            }
        }
        determinant += (i % 2 == 0 ? 1 : -1) * matrix[0][i] * calculateDeterminant2(minor);
    }
    return determinant;
}

    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    // إذا كانت المصفوفة موجودة، اسأل المستخدم إذا كان يريد استخدامها
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(this, "هل تريد استخدام المصفوفة الموجودة؟", "اختيار المصفوفة", JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            // إذا اختار استخدام المصفوفة الموجودة
            try {
                double[][] invertedMatrix = invertMatrix(matrix);
                displayResultMatrix(invertedMatrix);
            } catch (Exception e) {
                showMessage("لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة وغير مفردة.");
            }
        } else {
            // إذا اختار إنشاء مصفوفة جديدة
            openMatrixInputForInversionDialog();
        }
    } else {
        // إذا لم تكن هناك مصفوفة موجودة، افتح نافذة إدخال حجم المصفوفة الجديدة مباشرةً
        openMatrixInputForInversionDialog();
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        parent.removeAll();
        parent.add(mainpanel);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_jButton12ActionPerformed

    
    // دالة لعرض رسائل الخطأ في المنتصف
private void showErrorMessage(String message) {
    JOptionPane optionPane = new JOptionPane(message, JOptionPane.ERROR_MESSAGE);
    JDialog dialog = optionPane.createDialog(null, "خطأ");
    dialog.setLocationRelativeTo(null); // هذه السطر يجعل النافذة تظهر في المنتصف
    dialog.setVisible(true);
}

// دالة لعرض الرسائل العامة في المنتصف
private void showMessage(String message, String title) {
    JOptionPane optionPane = new JOptionPane(message, JOptionPane.INFORMATION_MESSAGE);
    JDialog dialog = optionPane.createDialog(null, title);
    dialog.setLocationRelativeTo(null); // هذه السطر يجعل النافذة تظهر في المنتصف
    dialog.setVisible(true);
}


private void openMatrixInputPanels(int numMatrices, int rows, int cols) {
    // التحقق من أن الأبعاد أكبر من صفر
    if (rows <= 0 || cols <= 0) {
        showErrorMessage("عدد الصفوف والأعمدة يجب أن يكون أكبر من الصفر.");
        return; // إنهاء الدالة إذا كانت الأبعاد غير صحيحة
    }

    JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
    matrixFrame.setSize(400, 400);

    // إنشاء JPanel مع تخطيط GridLayout
    JPanel matrixPanel = new JPanel(new GridLayout(numMatrices, 1));

    // مصفوفة ثلاثية الأبعاد لحفظ الحقول لجميع المصفوفات
    JTextField[][][] matrixFields = new JTextField[numMatrices][rows][cols];
    for (int i = 0; i < numMatrices; i++) {
        JPanel singleMatrixPanel = new JPanel(new GridBagLayout()); // استخدام GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints();

        // حساب التسمية المناسبة بناءً على الفهرس i
        String labelName;
        if (i < 26) {
            // استخدام حرف أبجدي واحد للحالات من A إلى Z
            labelName = String.valueOf((char) ('A' + i));
        } else {
            // استخدام حرفين مكررين (مثل AA، BB، ...) للحالات الأكبر من Z
            char repeatedChar = (char) ('A' + (i - 26));
            labelName = String.valueOf(repeatedChar) + repeatedChar;
        }

        JLabel label = new JLabel("مصفوفة " + labelName); // تعيين التسمية المناسبة
        label.setHorizontalAlignment(SwingConstants.CENTER); // محاذاة التسمية في المنتصف

        // تعيين حجم الخط إلى 24 وجعله بخط عريض
        label.setFont(new Font("Arial", Font.BOLD, 24));

        // إعداد قيود GridBag لملء الصف
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = cols; // جعل التسمية تأخذ عرض كامل المصفوفة
        gbc.fill = GridBagConstraints.HORIZONTAL; // ملء المساحة الأفقية
        singleMatrixPanel.add(label, gbc); // إضافة التسمية في الأعلى

        // إنشاء حقول الإدخال لكل عنصر في المصفوفة
        for (int j = 0; j < rows; j++) {
            for (int k = 0; k < cols; k++) {
                matrixFields[i][j][k] = new JTextField(5);
                matrixFields[i][j][k].setPreferredSize(new Dimension(15, 25)); // تعيين الحجم المفضل
                gbc.gridx = k; // تعيين موضع الحقل
                gbc.gridy = j + 1; // تعيين الصف (بدءًا من الصف 1 بعد التسمية)
                gbc.gridwidth = 1; // جعل الحقل يأخذ عرض عمود واحد
                singleMatrixPanel.add(matrixFields[i][j][k], gbc); // إضافة حقول الإدخال
            }
        }
        matrixPanel.add(singleMatrixPanel); // إضافة المصفوفة إلى اللوحة الرئيسية
    }

    // إضافة JScrollPane لتوفير إمكانية التمرير
    JScrollPane scrollPane = new JScrollPane(matrixPanel);
    scrollPane.setPreferredSize(new Dimension(380, 300)); // تعيين الحجم المفضل لـ JScrollPane

    JButton sumButton = new JButton("جمع المصفوفات");
    sumButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] sumMatrix = new double[rows][cols];
            try {
                // حساب جمع القيم من جميع المصفوفات
                for (int i = 0; i < numMatrices; i++) {
                    for (int j = 0; j < rows; j++) {
                        for (int k = 0; k < cols; k++) {
                            sumMatrix[j][k] += Double.parseDouble(matrixFields[i][j][k].getText());
                        }
                    }
                }
                displaySumMatrix21(sumMatrix); // عرض الناتج
                matrixFrame.dispose(); // إغلاق نافذة إدخال المصفوفات
            } catch (NumberFormatException ex) {
                showErrorMessage("يرجى إدخال أرقام صحيحة فقط");
            }
        }
    });
    matrixFrame.add(scrollPane, BorderLayout.CENTER); // إضافة JScrollPane إلى الإطار
    matrixFrame.add(sumButton, BorderLayout.SOUTH);
    
    // جعل نافذة المصفوفات تظهر في المنتصف
    matrixFrame.setLocationRelativeTo(null);
    
    matrixFrame.setVisible(true);
}


private void displaySumMatrix21(double[][] sumMatrix) {
    int rows = sumMatrix.length;
    int cols = sumMatrix[0].length;
    StringBuilder resultText = new StringBuilder("مصفوفة الناتج:\n");
    for (double[] row : sumMatrix) {
        for (double val : row) {
            resultText.append(String.format("%8.2f", val)).append(" ");
        }
        resultText.append("\n");
    }

    JTextArea resultArea = new JTextArea(resultText.toString());
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);

    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    JPanel resultPanel = new JPanel(new BorderLayout());
    resultPanel.setBackground(Color.BLACK);
    resultPanel.add(scrollPane, BorderLayout.CENTER);

    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new FlowLayout());

    // إنشاء إطار رسائل قابل للإغلاق
    JDialog dialog = new JOptionPane(resultPanel, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION).createDialog(this, "مصفوفة الناتج");
    dialog.setSize(400, 300);

    // زر لحساب المحدد إذا كانت المصفوفة مربعة
    if (rows == cols) {
        JButton determinantButton = new JButton("احسب المحدد");
        determinantButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                double determinant = calculateDeterminant9(sumMatrix);
                showResult("قيمة المحدد هي: " + determinant, "المحدد"); // عرض نافذة جديدة بالنتيجة
            }
        });
        buttonPanel.add(determinantButton);

        // زر لحساب المصفوفة المعكوسة (يظهر فقط إذا كانت المصفوفة مربعة)
        JButton inverseButton = new JButton("احسب المعكوس");
        inverseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    double[][] inverseMatrix = invertMatrix0(sumMatrix);
                    dialog.dispose(); // إغلاق النافذة الحالية
                    displaySumMatrix(inverseMatrix); // عرض نافذة جديدة بالمصفوفة المعكوسة
                } catch (ArithmeticException ex) {
                    dialog.dispose(); // إغلاق النافذة الحالية
                    showErrorMessage("لا يمكن حساب المعكوس. المحدد يساوي صفر."); // عرض رسالة خطأ
                }
            }
        });
        buttonPanel.add(inverseButton); // إضافة زر المعكوس إلى لوحة الأزرار
    }

    // زر لحساب المصفوفة المنقولة
    JButton transposeButton = new JButton("احسب المنقول");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] transposedMatrix = transposeMatrix0(sumMatrix);
            dialog.dispose(); // إغلاق النافذة الحالية
            displaySumMatrix(transposedMatrix); // عرض نافذة جديدة بالمصفوفة المنقولة
        }
    });
    buttonPanel.add(transposeButton);

    resultPanel.add(buttonPanel, BorderLayout.SOUTH);
    dialog.setVisible(true); // عرض النافذة الحالية
}

private void showResult(String message, String title) {
    JTextArea resultArea = new JTextArea(message);
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);
    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 100));
    JOptionPane.showMessageDialog(this, scrollPane, title, JOptionPane.INFORMATION_MESSAGE);
}



private double[][] transposeMatrix0(double[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    double[][] transposed = new double[cols][rows];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
    return transposed;
}

private double[][] invertMatrix0(double[][] matrix) throws ArithmeticException {
    int n = matrix.length;
    double[][] augmentedMatrix = new double[n][2 * n];
    double[][] inverseMatrix = new double[n][n];

    // إنشاء مصفوفة موسعة لإجراء العمليات
    for (int i = 0; i < n; i++) {
        System.arraycopy(matrix[i], 0, augmentedMatrix[i], 0, n);
        augmentedMatrix[i][i + n] = 1;
    }

    // إجراء عمليات صفوف لخفض المصفوفة إلى الشكل القياسي
    for (int i = 0; i < n; i++) {
        double pivot = augmentedMatrix[i][i];
        if (pivot == 0) {
            throw new ArithmeticException("المحدد يساوي صفر، لا يمكن حساب المعكوس.");
        }
        for (int j = 0; j < 2 * n; j++) {
            augmentedMatrix[i][j] /= pivot;
        }
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = augmentedMatrix[k][i];
                for (int j = 0; j < 2 * n; j++) {
                    augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
                }
            }
        }
    }

    // استخراج المصفوفة المعكوسة
    for (int i = 0; i < n; i++) {
        System.arraycopy(augmentedMatrix[i], n, inverseMatrix[i], 0, n);
    }

    return inverseMatrix;
}

private double calculateDeterminant9(double[][] matrix) {
    int n = matrix.length;
    if (n == 1) {
        return matrix[0][0];
    }
    if (n == 2) {
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    }
    
    double determinant = 0;
    for (int i = 0; i < n; i++) {
        // إنشاء مصفوفة فرعية لاستبعاد الصف الأول والعمود الحالي
        double[][] subMatrix = new double[n - 1][n - 1];
        for (int j = 1; j < n; j++) {
            int colIndex = 0;
            for (int k = 0; k < n; k++) {
                if (k == i) continue; // تخطي العمود الذي يتم استبعاده
                subMatrix[j - 1][colIndex++] = matrix[j][k];
            }
        }
        // حساب المحدد باستخدام التوسع عبر الصف الأول
        determinant += Math.pow(-1, i) * matrix[0][i] * calculateDeterminant9(subMatrix);
    }
    return determinant;
}

private JLabel createStyledLabel(String text) {
    JLabel label = new JLabel(text, SwingConstants.CENTER);
    label.setPreferredSize(new Dimension(380, 30)); // تعيين العرض ليكون بعرض البانل تقريبًا
    label.setFont(new Font("SansSerif", Font.BOLD, 18)); // تحديد الخط كـ Bold وحجم 18
    return label;
}

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    // إنشاء نافذة جديدة لإدخال عدد المصفوفات وحجمها
    JPanel panel = new JPanel(new FlowLayout());
    JTextField numMatricesField = new JTextField(5);
    JTextField rowsField = new JTextField(5);  // إدخال عدد الصفوف
    JTextField colsField = new JTextField(5);  // إدخال عدد الأعمدة
    JButton generateButton = new JButton("إنشاء المصفوفات");

    panel.add(new JLabel("ادخل عدد المصفوفات:"));
    panel.add(numMatricesField);
    panel.add(new JLabel("ادخل عدد الصفوف:"));
    panel.add(rowsField);
    panel.add(new JLabel("ادخل عدد الأعمدة:"));
    panel.add(colsField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("إدخال عدد وحجم المصفوفات");
    inputFrame.setSize(400, 300);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int numMatrices = Integer.parseInt(numMatricesField.getText());
                int rows = Integer.parseInt(rowsField.getText());
                int cols = Integer.parseInt(colsField.getText());

                if (numMatrices <= 0 || rows <= 0 || cols <= 0) {
                    showErrorMessage("عدد المصفوفات، الصفوف والأعمدة يجب أن يكونوا أكبر من 0");
                    return; // عدم متابعة العملية إذا كانت الأبعاد غير صالحة
                }

                inputFrame.dispose(); // إغلاق نافذة الإدخال
                openMatrixInputPanels(numMatrices, rows, cols); // فتح نافذة إدخال المصفوفات
            } catch (NumberFormatException ex) {
                showErrorMessage("يرجى إدخال أرقام صحيحة أكبر من 0");
            }
        }
    });
    
    

    }//GEN-LAST:event_jButton5ActionPerformed
    private void openMatrixInputPanel(int numMatrices, int rows, int cols) {
    // التحقق من أن الأبعاد أكبر من صفر
    if (rows <= 0 || cols <= 0) {
        JOptionPane.showMessageDialog(null, "عدد الصفوف والأعمدة يجب أن يكون أكبر من الصفر.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return; // إنهاء الدالة إذا كانت الأبعاد غير صحيحة
    }

    JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
    matrixFrame.setSize(400, 400);

    // جعل نافذة الإطار تظهر في المنتصف
    matrixFrame.setLocationRelativeTo(null); 

    // إنشاء JPanel مع تخطيط GridLayout
    JPanel matrixPanel = new JPanel(new GridLayout(numMatrices, 1));

    // مصفوفة ثلاثية الأبعاد لحفظ الحقول لجميع المصفوفات
    JTextField[][][] matrixFields = new JTextField[numMatrices][rows][cols];
    for (int i = 0; i < numMatrices; i++) {
        JPanel singleMatrixPanel = new JPanel(new GridBagLayout()); // استخدام GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints();

        // حساب التسمية المناسبة بناءً على الفهرس i
        String labelName;
        if (i < 26) {
            // استخدام حرف أبجدي واحد للحالات من A إلى Z
            labelName = String.valueOf((char) ('A' + i));
        } else {
            // استخدام حرفين مكررين (مثل AA، BB، ...) للحالات الأكبر من Z
            char repeatedChar = (char) ('A' + (i - 26));
            labelName = String.valueOf(repeatedChar) + repeatedChar;
        }

        JLabel label = new JLabel("مصفوفة " + labelName); // تعيين التسمية المناسبة
        label.setHorizontalAlignment(SwingConstants.CENTER); // محاذاة التسمية في المنتصف

        // تعيين حجم الخط إلى 24 وجعله بخط عريض
        label.setFont(new Font("Arial", Font.BOLD, 24));

        // إعداد قيود GridBag لملء الصف
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = cols; // جعل التسمية تأخذ عرض كامل المصفوفة
        gbc.fill = GridBagConstraints.HORIZONTAL; // ملء المساحة الأفقية
        singleMatrixPanel.add(label, gbc); // إضافة التسمية في الأعلى

        // إنشاء حقول الإدخال لكل عنصر في المصفوفة
        for (int j = 0; j < rows; j++) {
            for (int k = 0; k < cols; k++) {
                matrixFields[i][j][k] = new JTextField(5);
                matrixFields[i][j][k].setPreferredSize(new Dimension(15, 25)); // تعيين الحجم المفضل
                gbc.gridx = k; // تعيين موضع الحقل
                gbc.gridy = j + 1; // تعيين الصف (بدءًا من الصف 1 بعد التسمية)
                gbc.gridwidth = 1; // جعل الحقل يأخذ عرض عمود واحد
                singleMatrixPanel.add(matrixFields[i][j][k], gbc); // إضافة حقول الإدخال
            }
        }
        matrixPanel.add(singleMatrixPanel); // إضافة المصفوفة إلى اللوحة الرئيسية
    }

    // إضافة JScrollPane لتوفير إمكانية التمرير
    JScrollPane scrollPane = new JScrollPane(matrixPanel);
    scrollPane.setPreferredSize(new Dimension(380, 300)); // تعيين الحجم المفضل لـ JScrollPane

    JButton subtractButton = new JButton("طرح المصفوفات");
    subtractButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] resultMatrix = new double[rows][cols];
            try {
                // حساب طرح القيم من جميع المصفوفات
                for (int i = 0; i < numMatrices; i++) {
                    for (int j = 0; j < rows; j++) {
                        for (int k = 0; k < cols; k++) {
                            // إذا كانت هذه هي المصفوفة الأولى، نأخذ القيم منها
                            if (i == 0) {
                                resultMatrix[j][k] = Double.parseDouble(matrixFields[i][j][k].getText());
                            } else {
                                // بالنسبة للمصفوفات الأخرى، نطرح القيم
                                resultMatrix[j][k] -= Double.parseDouble(matrixFields[i][j][k].getText());
                            }
                        }
                    }
                }
                displaySumMatrix(resultMatrix); // عرض الناتج
                matrixFrame.dispose(); // إغلاق نافذة إدخال المصفوفات
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(scrollPane, BorderLayout.CENTER); // إضافة JScrollPane إلى الإطار
    matrixFrame.add(subtractButton, BorderLayout.SOUTH);
    matrixFrame.setVisible(true);
}

    
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
JTextField numMatricesField = new JTextField(5);
JTextField rowsField = new JTextField(5);  // إدخال عدد الصفوف
JTextField colsField = new JTextField(5);  // إدخال عدد الأعمدة
JButton generateButton = new JButton("إنشاء المصفوفات");

panel.add(new JLabel("ادخل عدد المصفوفات:"));
panel.add(numMatricesField);
panel.add(new JLabel("ادخل عدد الصفوف:"));
panel.add(rowsField);
panel.add(new JLabel("ادخل عدد الأعمدة:"));
panel.add(colsField);
panel.add(generateButton);

JFrame inputFrame = new JFrame("إدخال عدد وحجم المصفوفات");
inputFrame.setSize(400, 200);
inputFrame.add(panel);

// جعل النافذة تظهر في المنتصف
inputFrame.setLocationRelativeTo(null);

inputFrame.setVisible(true);

generateButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            int numMatrices = Integer.parseInt(numMatricesField.getText());
            int rows = Integer.parseInt(rowsField.getText());
            int cols = Integer.parseInt(colsField.getText());

            if (numMatrices <= 0 || rows <= 0 || cols <= 0) {
                JOptionPane.showMessageDialog(null, "عدد المصفوفات، الصفوف والأعمدة يجب أن يكونوا أكبر من 0", "خطأ", JOptionPane.ERROR_MESSAGE);
                return; // عدم متابعة العملية إذا كانت الأبعاد غير صالحة
            }

            inputFrame.dispose(); // إغلاق نافذة الإدخال
            openMatrixInputPanel(numMatrices, rows, cols); // فتح نافذة إدخال المصفوفات
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة أكبر من 0", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    }
});

    }//GEN-LAST:event_jButton7ActionPerformed

    
    
//    private double[][] savedMatrix = matrix;
private void openMatrixInputDialogForMultiplication() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(6);
    JTextField colsField = new JTextField(6);
    JTextField multiplierField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل عدد الصفوف:"));
    panel.add(rowsField);
    panel.add(new JLabel("أدخل عدد الأعمدة:"));
    panel.add(colsField);
    panel.add(new JLabel("أدخل العدد لضربه:"));
    panel.add(multiplierField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowsField.getText());
                int cols = Integer.parseInt(colsField.getText());
                double multiplier = Double.parseDouble(multiplierField.getText());
                inputFrame.dispose();
                openMatrixPanelForMultiplication(rows, cols, multiplier);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixPanelForMultiplication(int rows, int cols, double multiplier) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    matrix = new double[rows][cols]; // تهيئة المصفوفة المحفوظة الجديدة

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ المصفوفة");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                double[][] resultMatrix = multiplyMatrixByScalar(matrix, multiplier);
                displayResultMatrix(resultMatrix);
                matrixFrame.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    matrixFrame.setVisible(true);
}

private void askForModificationOrMultiplier() {
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(null, "هل تريد تعديل المصفوفة الحالية؟", "تعديل المصفوفة", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            openMatrixPanelForModification();
        } else {
            askForMultiplier();
        }
    } else {
        JOptionPane.showMessageDialog(null, "لا توجد مصفوفة محفوظة. يرجى إنشاء مصفوفة جديدة.");
        openMatrixInputDialogForMultiplication();
    }
}

private void openMatrixPanelForModification() {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame matrixFrame = new JFrame("تعديل القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(String.valueOf(matrix[i][j]), 5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ التعديلات");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                matrixFrame.dispose();
                askForMultiplier();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void askForMultiplier() {
    try {
        double multiplier = Double.parseDouble(JOptionPane.showInputDialog("أدخل العدد لضربه في المصفوفة:"));
        double[][] resultMatrix = multiplyMatrixByScalar(matrix, multiplier);
        displayResultMatrix(resultMatrix);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
    }
}

private double[][] multiplyMatrixByScalar(double[][] matrix, double scalar) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    double[][] resultMatrix = new double[rows][cols];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            resultMatrix[i][j] = matrix[i][j] * scalar;
        }
    }
    return resultMatrix;
}

private void displayResultMatrix(double[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame resultFrame = new JFrame("نتيجة الضرب");
    resultFrame.setSize(500, 500);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(matrix[i][j]));
            resultField.setEditable(false);
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null);
    resultFrame.setVisible(true);
}


    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
    JButton newMatrixButton = new JButton("إنشاء مصفوفة جديدة");
    JButton existingMatrixButton = new JButton("استخدام المصفوفة الموجودة");

    panel.add(newMatrixButton);
    panel.add(existingMatrixButton);

    JFrame choiceFrame = new JFrame("اختيار المصفوفة");
    choiceFrame.setSize(300, 150);
    choiceFrame.add(panel);
    choiceFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    choiceFrame.setVisible(true);

    // إذا اختار إنشاء مصفوفة جديدة
    newMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            openMatrixInputDialogForMultiplication(); // فتح نافذة إدخال حجم المصفوفة
        }
    });

    // إذا اختار استخدام المصفوفة الموجودة
    existingMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            if (matrix == null) {
                JOptionPane.showMessageDialog(null, "لا يوجد مصفوفة محفوظة. يُرجى إنشاء مصفوفة جديدة.");
                openMatrixInputDialogForMultiplication();
            } else {
                displayMatrix();
                askForModificationOrMultiplier(); // سؤال المستخدم
            }
        }
    });
    }//GEN-LAST:event_jButton9ActionPerformed
private void openMatrixMultiplicationInputDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(5);
    JTextField colsField = new JTextField(5);
    JButton generateButton = new JButton("ضرب المصفوفتين");

    JLabel rowsLabel = new JLabel("عدد الصفوف للمصفوفة الأولى:", SwingConstants.CENTER);
    rowsLabel.setFont(new Font("Arial", Font.BOLD, 24));
    panel.add(rowsLabel);
    panel.add(rowsField);

    JLabel colsLabel = new JLabel("عدد الأعمدة للمصفوفة الأولى:", SwingConstants.CENTER);
    colsLabel.setFont(new Font("Arial", Font.BOLD, 24));
    panel.add(colsLabel);
    panel.add(colsField);

    panel.add(generateButton);

    JFrame inputFrame = new JFrame("أبعاد المصفوفتين");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // توسيط النافذة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rowsA = Integer.parseInt(rowsField.getText());
                int colsA = Integer.parseInt(colsField.getText());
                int rowsB = colsA;
                int colsB = Integer.parseInt(JOptionPane.showInputDialog("ادخل عدد الأعمدة للمصفوفة الثانية:"));
                inputFrame.dispose();
                openMatrixInputPanelsForMultiplication(rowsA, colsA, rowsB, colsB);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixInputPanelsForMultiplication(int rowsA, int colsA, int rowsB, int colsB) {
    JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
    matrixFrame.setSize(500, 500);
    matrixFrame.setLocationRelativeTo(null); // توسيط النافذة

    JPanel matrixPanel = new JPanel();
    matrixPanel.setLayout(new BoxLayout(matrixPanel, BoxLayout.Y_AXIS));

    JTextField[][] matrixAFields = new JTextField[rowsA][colsA];
    JTextField[][] matrixBFields = new JTextField[rowsB][colsB];

    // باقي الكود دون تغيير...


    // إعداد لوحة مصفوفة A
    JPanel matrixAPanel = new JPanel();
    matrixAPanel.setLayout(new BoxLayout(matrixAPanel, BoxLayout.Y_AXIS));
    
    JLabel labelA = new JLabel("مصفوفة A:", SwingConstants.CENTER);
    labelA.setFont(new Font("Arial", Font.BOLD, 24));
    labelA.setHorizontalAlignment(SwingConstants.CENTER); // توسيط النص في JLabel
    matrixAPanel.add(labelA);

    JPanel matrixAGridPanel = new JPanel(new GridLayout(rowsA, colsA, 5, 5));
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsA; j++) {
            matrixAFields[i][j] = new JTextField(5);
            matrixAFields[i][j].setPreferredSize(new Dimension(25, 15)); // تعيين العرض والطول المطلوبين
            matrixAFields[i][j].setHorizontalAlignment(SwingConstants.CENTER); // محاذاة النص في المنتصف
            matrixAGridPanel.add(matrixAFields[i][j]);
        }
    }
    matrixAPanel.add(matrixAGridPanel);

    // إعداد لوحة مصفوفة B
    JPanel matrixBPanel = new JPanel();
    matrixBPanel.setLayout(new BoxLayout(matrixBPanel, BoxLayout.Y_AXIS));
    
    JLabel labelB = new JLabel("مصفوفة B:", SwingConstants.CENTER);
    labelB.setFont(new Font("Arial", Font.BOLD, 24));
    labelB.setHorizontalAlignment(SwingConstants.CENTER); // توسيط النص في JLabel
    matrixBPanel.add(labelB);

    JPanel matrixBGridPanel = new JPanel(new GridLayout(rowsB, colsB, 5, 5));
    for (int i = 0; i < rowsB; i++) {
        for (int j = 0; j < colsB; j++) {
            matrixBFields[i][j] = new JTextField(5);
            matrixBFields[i][j].setPreferredSize(new Dimension(25, 15)); // تعيين العرض والطول المطلوبين
            matrixBFields[i][j].setHorizontalAlignment(SwingConstants.CENTER); // محاذاة النص في المنتصف
            matrixBGridPanel.add(matrixBFields[i][j]);
        }
    }
    matrixBPanel.add(matrixBGridPanel);

    // إضافة اللوحتين إلى اللوحة الرئيسية
    matrixPanel.add(matrixAPanel);
    matrixPanel.add(matrixBPanel);

    // زر لضرب المصفوفتين
    JButton multiplyButton = new JButton("ضرب المصفوفتين");
    multiplyButton.setFont(new Font("Arial", Font.BOLD, 20));
    multiplyButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] matrixA = new double[rowsA][colsA];
            double[][] matrixB = new double[rowsB][colsB];
            double[][] resultMatrix = new double[rowsA][colsB];
            try {
                // تعبئة المصفوفة A
                for (int i = 0; i < rowsA; i++) {
                    for (int j = 0; j < colsA; j++) {
                        matrixA[i][j] = Double.parseDouble(matrixAFields[i][j].getText());
                    }
                }

                // تعبئة المصفوفة B
                for (int i = 0; i < rowsB; i++) {
                    for (int j = 0; j < colsB; j++) {
                        matrixB[i][j] = Double.parseDouble(matrixBFields[i][j].getText());
                    }
                }

                // عملية ضرب المصفوفات
                for (int i = 0; i < rowsA; i++) {
                    for (int j = 0; j < colsB; j++) {
                        resultMatrix[i][j] = 0;
                        for (int k = 0; k < colsA; k++) {
                            resultMatrix[i][j] += matrixA[i][k] * matrixB[k][j];
                        }
                    }
                }

                displayResultMatrix(resultMatrix, rowsA, colsB);
                
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // إضافة اللوحات والأزرار إلى الإطار
    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(multiplyButton, BorderLayout.SOUTH);
    matrixFrame.setVisible(true);
}

private void displayResultMatrix(double[][] resultMatrix, int rows, int cols) {
    JFrame resultFrame = new JFrame("نتيجة الضرب");
    resultFrame.setSize(400, 400);
    resultFrame.setLocationRelativeTo(null); // توسيط النافذة

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    resultPanel.setBackground(Color.BLACK);
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(resultMatrix[i][j]));
            resultField.setEditable(false);
            resultField.setPreferredSize(new Dimension(25, 25));
            resultField.setHorizontalAlignment(SwingConstants.CENTER);
            resultField.setBackground(Color.BLACK);
            resultField.setForeground(Color.WHITE);
            resultPanel.add(resultField);
        }
    }

    JPanel buttonPanel = new JPanel(new FlowLayout());

    if (rows == cols) {
        JButton determinantButton = new JButton("احسب المحدد");
        determinantButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                double determinant = calculateDeterminant2(resultMatrix);
                showResult2("قيمة المحدد هي: " + determinant, "المحدد");
            }
        });
        buttonPanel.add(determinantButton);
    }

    JButton transposeButton = new JButton("احسب المنقول");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            double[][] transposedMatrix = transposeMatrix0(resultMatrix);
            resultFrame.dispose();
            displayResultMatrix(transposedMatrix, cols, rows);
        }
    });
    buttonPanel.add(transposeButton);

    JButton inverseButton = new JButton("احسب المعكوس");
    inverseButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                double[][] inverseMatrix = invertMatrix0(resultMatrix);
                resultFrame.dispose();
                displayResultMatrix(inverseMatrix, rows, cols);
            } catch (ArithmeticException ex) {
                resultFrame.dispose();
                showErrorMessage("لا يمكن حساب المعكوس. المحدد يساوي صفر.");
            }
        }
    });
    buttonPanel.add(inverseButton);

    resultFrame.setLayout(new BorderLayout());
    resultFrame.add(resultPanel, BorderLayout.CENTER);
    resultFrame.add(buttonPanel, BorderLayout.SOUTH);
    resultFrame.setVisible(true);
}

private void showResult2(String message, String title) {
    JTextArea resultArea = new JTextArea(message);
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);
    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 100));
    JOptionPane.showMessageDialog(null, scrollPane, title, JOptionPane.INFORMATION_MESSAGE); // توسيط الرسالة
}


    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        openMatrixMultiplicationInputDialog();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    


// دالة لعرض الخيارات
private void showMatrixOptionsDialog1() {
    // إعداد الخيارين
    String[] options = {"العمل على المصفوفة الحالية", "إنشاء مصفوفة جديدة"};
    int choice = JOptionPane.showOptionDialog(
            this,
            "اختر الخيار الذي ترغب فيه:",
            "اختيار المصفوفة",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
    );

    // تنفيذ الإجراء بناءً على الخيار
    if (choice == 0) {
        // العمل على المصفوفة الحالية
        if (matrix != null) {
            try {
                double[][] transposedMatrix = transposeMatrix8(matrix);
                displayResultMatrix2(transposedMatrix);
            } catch (Exception ex) {
                showMessage("لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "لا توجد مصفوفة حالية.", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    } else if (choice == 1) {
        // إنشاء مصفوفة جديدة
        openMatrixInputForTransposeDialog();
    }
}

// دالة إدخال حجم المصفوفة الجديدة
private void openMatrixInputForTransposeDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowField = new JTextField(5);
    JTextField colField = new JTextField(5);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("عدد الصفوف:"));
    panel.add(rowField);
    panel.add(new JLabel("عدد الأعمدة:"));
    panel.add(colField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("إدخال حجم المصفوفة");
    inputFrame.setSize(300, 150);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowField.getText());
                int cols = Integer.parseInt(colField.getText());
                inputFrame.dispose();
                openMatrixPanelForTranspose(rows, cols); // فتح نافذة إدخال القيم بناءً على الأبعاد
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة للصفوف والأعمدة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

// دالة إدخال القيم في المصفوفة
private void openMatrixPanelForTranspose(int rows, int cols) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(400, 400);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton transposeButton = new JButton("احصل على المقلوب");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                double[][] originalMatrix = new double[rows][cols];

                // تعبئة المصفوفة الأصلية بالقيم المدخلة من الحقول
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        originalMatrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }

                // إنشاء المصفوفة المعكوسة
                double[][] transposedMatrix = transposeMatrix8(originalMatrix);
                
                // عرض المصفوفة المعكوسة
                                // عرض المصفوفة المعكوسة
                displayResultMatrix2(transposedMatrix);
                
                matrixFrame.dispose(); // إغلاق نافذة إدخال القيم
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(transposeButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    matrixFrame.setVisible(true);
}

private double[][] transposeMatrix8(double[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    double[][] transposedMatrix = new double[cols][rows];

    // تبديل الصفوف والأعمدة
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }
    return transposedMatrix;
}

private void displayResultMatrix2(double[][] resultMatrix) {
    int rows = resultMatrix.length;
    int cols = resultMatrix[0].length;

    JFrame resultFrame = new JFrame("مصفوفة المعكوس");
    resultFrame.setSize(400, 400);
    
    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.format("%.4f", resultMatrix[i][j]));
            resultField.setEditable(false);
            resultField.setHorizontalAlignment(SwingConstants.CENTER); // توسيط النص
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    resultFrame.setVisible(true);
}
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
showMatrixOptionsDialog1();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void infobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infobtnActionPerformed
        info Info = new info();
        Info.show();
    }//GEN-LAST:event_infobtnActionPerformed

    
    
    private void infobtnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_infobtnMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_infobtnMouseWheelMoved

    private void lgninfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgninfoActionPerformed
        parent.removeAll();
        parent.add(mainpanel);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_lgninfoActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    // Create and display the form
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            Fmatcalc frame = new Fmatcalc();
            frame.setVisible(true);
            // Center the frame on the screen
            frame.setSize(490, 398); // Set your desired size here
            frame.setLocationRelativeTo(null); // Center the frame
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Ope;
    private javax.swing.JButton createmat;
    private javax.swing.JButton createmat1;
    private javax.swing.JButton infobtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lgninfo;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPanel parent;
    // End of variables declaration//GEN-END:variables

    private double[][] invertMatrix(double[][] matrix) throws Exception {
    int n = matrix.length;
    if (n == 0 || matrix[0].length != n) {
        throw new Exception("المصفوفة ليست مربعة");
    }

    double[][] augmentedMatrix = new double[n][2 * n];

    // إنشاء مصفوفة موسعة
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            augmentedMatrix[i][j] = matrix[i][j];
        }
        augmentedMatrix[i][i + n] = 1; // إضافة مصفوفة الهوية
    }

    // تطبيق طريقة جاوس-جوردان
    for (int i = 0; i < n; i++) {
        // تحقق من أن العنصر القطرى غير صفر
        if (augmentedMatrix[i][i] == 0) {
            throw new Exception("مصفوفة مفردة");
        }

        // جعل العنصر القطرى يساوي 1
        double diagElement = augmentedMatrix[i][i];
        for (int j = 0; j < 2 * n; j++) {
            augmentedMatrix[i][j] /= diagElement;
        }

        // جعل العناصر الأخرى في العمود الحالي تساوي 0
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = augmentedMatrix[k][i];
                for (int j = 0; j < 2 * n; j++) {
                    augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
                }
            }
        }
    }

    // استخراج المصفوفة المعكوسة من المصفوفة الموسعة
    double[][] invertedMatrix = new double[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            invertedMatrix[i][j] = augmentedMatrix[i][j + n];
        }
    }

    return invertedMatrix;
}

private void showMessage(String message) {
    JOptionPane.showMessageDialog(this, message, "خطأ", JOptionPane.ERROR_MESSAGE);
}
}