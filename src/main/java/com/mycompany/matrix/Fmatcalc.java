package com.mycompany.matrix;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author AhmedOmar
 */
public class Fmatcalc extends javax.swing.JFrame {

    /**
     *
     */
    @SuppressWarnings({"FieldNameHidesFieldInSuperclass", "FieldNameHidesFieldInSuperclass"})
    private Object[][] matrix;
    private final Object[][][] results = new Object[50][][];
 // مصفوفة ثلاثية الأبعاد لتخزين النتائج
    private int resultCount = 0; // عدد النتائج المحفوظة

    /**
     * Creates new form Fmatcalc
     */
    public Fmatcalc() {
        initComponents();
        applyHighlightShadow(lgninfo);
        applyHighlightShadow(infobtn);
        
    }
    
    
    // تعريف دالة خاصة لتطبيق تأثيرات highlight و shadow على الأزرار
private void applyHighlightShadow(JButton button) {
    button.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createRaisedBevelBorder()); // تأثير الهايلايت
        }

        @Override
        public void mouseExited(java.awt.event.MouseEvent evt) {
            button.setBorder(null); // إزالة التأثير عند الخروج
        }

        @Override
        public void mousePressed(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createLoweredBevelBorder()); // تأثير shadow عند الضغط
        }

        @Override
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            button.setBorder(BorderFactory.createRaisedBevelBorder()); // إعادة تأثير الهايلايت عند الإفراج
        }
    });
}

// في نهاية initComponents() استدعي الدالة للأزرار


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parent = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        infobtn = new javax.swing.JButton();
        lgninfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mainpanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        createmat = new javax.swing.JButton();
        createmat1 = new javax.swing.JButton();
        Ope = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        parent.setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infobtn.setBackground(new java.awt.Color(102, 102, 102));
        infobtn.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        infobtn.setForeground(new java.awt.Color(255, 255, 255));
        infobtn.setText("معلومات حول البرنامج");
        infobtn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                infobtnMouseWheelMoved(evt);
            }
        });
        infobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infobtnActionPerformed(evt);
            }
        });
        jPanel1.add(infobtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 150, 50));

        lgninfo = new JButton();
        lgninfo.setBackground(new java.awt.Color(102, 102, 102));
        lgninfo.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lgninfo.setForeground(new java.awt.Color(255, 255, 255));
        lgninfo.setText("الدخول الي البرنامج");
        lgninfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgninfoActionPerformed(evt);
            }
        });
        jPanel1.add(lgninfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 150, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\EL-Hussein Store\\OneDrive\\Documents\\NetBeansProjects\\matrix\\src\\main\\java\\56371c2987f7a8739b7280567e205c94.jpg"));
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 400));

        parent.add(jPanel1, "card4");

        mainpanel.setBackground(new java.awt.Color(0, 0, 0));
        mainpanel.setName("Matrices Solver"); // NOI18N

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 153, 0));
        jButton1.setText("عرض المصفوفه");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 153, 0));
        jButton2.setText("قيمة المصفوفه");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 153, 0));
        jButton3.setText("العمليات الحسابيه علي المصفوفه");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 153, 0));
        jButton4.setText("حل المعادلات الرياضيه");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        createmat.setBackground(new java.awt.Color(204, 102, 0));
        createmat.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        createmat.setText("انشاء مصفوفه");
        createmat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creatematActionPerformed(evt);
            }
        });

        createmat1.setBackground(new java.awt.Color(0, 0, 0));
        createmat1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        createmat1.setForeground(new java.awt.Color(255, 153, 0));
        createmat1.setText("الحافظه");
        createmat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createmat1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainpanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(24, 24, 24)))
                        .addGap(10, 10, 10)))
                .addContainerGap())
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(createmat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(71, 71, 71))
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(createmat1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createmat, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createmat1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );

        parent.add(mainpanel, "card2");

        Ope.setBackground(new java.awt.Color(0, 0, 0));

        jButton10.setBackground(new java.awt.Color(0, 0, 0));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 153, 0));
        jButton10.setText("قسمة المصفوفه في عدد ");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(0, 0, 0));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 153, 0));
        jButton11.setText("معكوس المصفوفه");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(153, 0, 0));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 153, 0));
        jButton12.setText("رجوع");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 153, 0));
        jButton5.setText("جمع عدد من المصفوفات");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 153, 0));
        jButton6.setText("ضرب مصفوفتين");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 153, 0));
        jButton7.setText("طرح عدد من المصفوفات");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 153, 0));
        jButton8.setText("مقلوب المصفوفه");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 0, 0));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 153, 0));
        jButton9.setText("ضرب المصفوفه في عدد ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(0, 0, 0));
        jButton13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton13.setForeground(new java.awt.Color(255, 153, 0));
        jButton13.setText("n^(المصفوفه)");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OpeLayout = new javax.swing.GroupLayout(Ope);
        Ope.setLayout(OpeLayout);
        OpeLayout.setHorizontalGroup(
            OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OpeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OpeLayout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(OpeLayout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OpeLayout.setVerticalGroup(
            OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OpeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(OpeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        parent.add(Ope, "card3");

        getContentPane().add(parent, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // إعلان المصفوفة كمتغير عام داخل الصف
//public Object[][] matrix;

private void openMatrixInputDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowField = new JTextField(6);
    JTextField colField = new JTextField(6);
    JButton saveDimensionsButton = new JButton("حفظ");

    panel.add(new JLabel("عدد الصفوف:"));
    panel.add(rowField);
    panel.add(new JLabel("عدد الأعمدة:"));
    panel.add(colField);
    panel.add(saveDimensionsButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(300, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);  // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    saveDimensionsButton.addActionListener((ActionEvent e) -> {
        try {
            int rows = Integer.parseInt(rowField.getText());
            int cols = Integer.parseInt(colField.getText());

            if (rows <= 0 || cols <= 0) {
                JOptionPane.showMessageDialog(null, "يجب أن تكون الأبعاد أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                return;
            }

            inputFrame.dispose();  // أغلق نافذة الأبعاد
            openMatrixPanel(rows, cols);  // فتح نافذة إدخال القيم بناءً على الأبعاد
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة للصفوف والأعمدة", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    });
}

private void openMatrixPanel(int rows, int cols) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(400, 400);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    matrix = new Object[rows][cols];  // تخصيص الحجم للمصفوفة العامة هنا

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveMatrixButton = new JButton("حفظ");
    saveMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            boolean hasError = false;

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    JTextField field = matrixFields[i][j];
                    String text = field.getText().trim();

                    // التحقق إذا كانت الخلية فارغة أو تحتوي على أكثر من حرف
                    if (text.isEmpty() || text.length() != 1) {
                        field.setBackground(Color.RED);  // تغيير لون الخلية إلى الأحمر إذا كانت غير صحيحة
                        hasError = true;
                    } else {
                        field.setBackground(Color.WHITE);  // إعادة لون الخلية إلى الأبيض إذا كانت صحيحة
                    }
                }
            }

            if (hasError) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى التأكد من عدم ترك أي خلية فارغة، وإدخال حرف واحد فقط في كل خلية.", "خطأ", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // إذا لم يكن هناك خطأ، قم بحفظ المصفوفة
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        String text = matrixFields[i][j].getText().trim();
                        matrix[i][j] = text.charAt(0);  // حفظ الحرف في المصفوفة
                    }
                }
                JOptionPane.showMessageDialog(matrixFrame, "تم حفظ المصفوفة بنجاح!");
                matrixFrame.dispose();  // إغلاق نافذة إدخال القيم
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(matrixFrame, "حدث خطأ غير متوقع أثناء الحفظ.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveMatrixButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);  // وضع النافذة في منتصف الشاشة
    matrixFrame.setVisible(true);
}

private void displayMatrix() {
    if (matrix == null) {
        JOptionPane.showMessageDialog(this, "لم يتم إنشاء أي مصفوفة بعد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int rows = matrix.length;
    int cols = matrix[0].length;

    // إنشاء لوحة لتخزين مربعات النص
    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    // تحويل المصفوفة إلى حقول نص
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // تصغير العرض إلى الثلثين وزيادة الطول إلى الضعف
            matrixFields[i][j] = new JTextField(10); // تقليص العرض إلى 10 (بدلاً من 15)
            matrixFields[i][j].setPreferredSize(new Dimension(matrixFields[i][j].getPreferredSize().width, 60)); // زيادة الطول إلى 60

            String value = (matrix[i][j] != null) ? matrix[i][j].toString() : "";  // التأكد من التعامل مع القيم بشكل صحيح
            matrixFields[i][j].setText(value);
            matrixFields[i][j].setEditable(false);  // بدءًا بجعل المربعات غير قابلة للتعديل
            matrixFields[i][j].setHorizontalAlignment(SwingConstants.CENTER);  // محاذاة النص في المنتصف
            matrixFields[i][j].setFont(new Font("Arial", Font.PLAIN, 20));  // زيادة حجم الخط

            matrixPanel.add(matrixFields[i][j]);
        }
    }

    // إعداد الأزرار "تعديل" و"حفظ"
    JButton editButton = new JButton("تعديل");
    JButton saveButton = new JButton("حفظ");
    saveButton.setEnabled(false); // يتم تعطيل زر الحفظ في البداية

    // تغيير حجم الأزرار لجعلها أكبر
    editButton.setPreferredSize(new Dimension(150, 50));  // تعيين حجم مخصص للزر
    saveButton.setPreferredSize(new Dimension(150, 50));  // تعيين حجم مخصص للزر
    editButton.setFont(new Font("Arial", Font.PLAIN, 20));  // زيادة حجم الخط للأزرار
    saveButton.setFont(new Font("Arial", Font.PLAIN, 20));  // زيادة حجم الخط للأزرار

    // ActionListener لزر التعديل
    editButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // تمكين التعديل على مربعات النص
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    matrixFields[i][j].setEditable(true);
                }
            }
            saveButton.setEnabled(true);  // تفعيل زر الحفظ
            editButton.setEnabled(false); // تعطيل زر التعديل أثناء التعديل
        }
    });

    // ActionListener لزر الحفظ
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                // تحديث المصفوفة بالقيم الجديدة من JTextField
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        String value = matrixFields[i][j].getText().trim();
                        // التأكد من أن القيم صحيحة (بناءً على نوع البيانات المتوقع)
                        if (value.matches("\\d+(\\.\\d+)?")) {
                            matrix[i][j] = Double.parseDouble(value); // حفظ القيمة كرقم
                        } else if (value.length() == 1) {
                            matrix[i][j] = value.charAt(0); // حفظ الحرف إذا كانت القيم نصوص
                        } else {
                            throw new IllegalArgumentException("خطأ: يجب أن تكون القيم أرقامًا أو حرفًا واحدًا.");
                        }
                    }
                }
                JOptionPane.showMessageDialog(null, "تم تحديث المصفوفة بنجاح!", "نجاح", JOptionPane.INFORMATION_MESSAGE);
                // تعطيل التعديل بعد الحفظ
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrixFields[i][j].setEditable(false);
                    }
                }
                saveButton.setEnabled(false); // تعطيل زر الحفظ بعد الحفظ
                editButton.setEnabled(true);  // تفعيل زر التعديل من جديد
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "خطأ في تنسيق الإدخال. يرجى التأكد من أن القيم المدخلة صحيحة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // إعداد JPanel للأزرار
    JPanel buttonPanel = new JPanel();
    buttonPanel.add(editButton);
    buttonPanel.add(saveButton);

    // إعداد النافذة مع المصفوفة من JTextField والأزرار
    JPanel panel = new JPanel(new BorderLayout());
    panel.add(new JScrollPane(matrixPanel), BorderLayout.CENTER);
    panel.add(buttonPanel, BorderLayout.SOUTH);

    JOptionPane.showMessageDialog(this, panel, "عرض وتعديل المصفوفة", JOptionPane.INFORMATION_MESSAGE);
}











/////////////////////////////////////////////////////////////
private void calculateAndDisplayDeterminant() {
    if (matrix == null) {
        JOptionPane.showMessageDialog(this, "لم يتم إنشاء أي مصفوفة بعد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int rows = matrix.length;
    int cols = matrix[0].length;

    if (rows != cols) {
        JOptionPane.showMessageDialog(this, "المصفوفة يجب أن تكون مربعة لحساب المحدد.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // تحويل المصفوفة إلى مصفوفة من النوع double
    double[][] numericMatrix = new double[rows][cols];
    try {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] instanceof Number) {
                    numericMatrix[i][j] = ((Number) matrix[i][j]).doubleValue();
                } else {
                    throw new NumberFormatException("المصفوفة تحتوي على عناصر غير رقمية.");
                }
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // حساب قيمة المحدد
    double determinant = calculateDeterminant(numericMatrix);

    // عرض قيمة المحدد
    String message = "قيمة المحدد هي:\n" + determinant;
    JTextArea messageText = new JTextArea(message);
    messageText.setEditable(false);
    messageText.setBackground(Color.BLACK);
    messageText.setForeground(new Color(255, 153, 0));
    messageText.setFont(new Font("Arial", Font.BOLD, 24));
    messageText.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

    JScrollPane scrollPane = new JScrollPane(messageText);
    scrollPane.setPreferredSize(new Dimension(400, 200));

    JPanel panel = new JPanel(new BorderLayout());
    panel.setBackground(Color.BLACK);
    panel.add(scrollPane, BorderLayout.CENTER);

    JOptionPane.showMessageDialog(this, panel, "قيمة المحدد", JOptionPane.INFORMATION_MESSAGE);
}








private double calculateDeterminant(double[][] matrix) {
    int n = matrix.length;

    // إذا كانت مصفوفة 1x1
    if (n == 1) {
        return matrix[0][0];
    }
    
    // إذا كانت مصفوفة 2x2
    if (n == 2) {
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    }

    // حساب المحدد لمصفوفة أكبر باستخدام التوسع حسب الصف الأول
    double determinant = 0;
    for (int i = 0; i < n; i++) {
        determinant += Math.pow(-1, i) * matrix[0][i] * calculateDeterminant(getMinor(matrix, 0, i));
    }
    return determinant;
}


private double[][] getMinor(double[][] matrix, int row, int col) {
    int n = matrix.length;
    double[][] minor = new double[n - 1][n - 1];
    
    for (int i = 0, mi = 0; i < n; i++) {
        if (i == row) continue;
        for (int j = 0, mj = 0; j < n; j++) {
            if (j == col) continue;
            minor[mi][mj++] = matrix[i][j];
        }
        mi++;
    }
    
    return minor;
}


//private Object[][] getMinor(Object[][] matrix, int row, int col) {
//    int n = matrix.length;
//    Object[][] minor = new Object[n - 1][n - 1];
//    
//    for (int i = 0, mi = 0; i < n; i++) {
//        if (i == row) continue;
//        for (int j = 0, mj = 0; j < n; j++) {
//            if (j == col) continue;
//            minor[mi][mj++] = matrix[i][j];
//        }
//        mi++;
//    }
//    
//    return minor;
//}




    private void creatematActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creatematActionPerformed
        openMatrixInputDialog();
    }//GEN-LAST:event_creatematActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        displayMatrix();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        calculateAndDisplayDeterminant();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    
    private void openEquationSolver() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField variableCountField = new JTextField(3); // تصغير حجم النص

    JButton proceedButton = new JButton("التالي");
    proceedButton.setPreferredSize(new Dimension(160, 50)); // حجم الزر الضعف
    proceedButton.setBackground(Color.BLACK); // لون الزر أسود
    proceedButton.setForeground(Color.decode("#FFD700")); // النص على الزر باللون الذهبي

    panel.add(new JLabel("عدد المتغيرات (2 أو 3):"));
    panel.add(variableCountField);
    panel.add(proceedButton);

    JFrame variableFrame = new JFrame("حل المعادلات الرياضية");
    variableFrame.setSize(300, 200);
    variableFrame.setLocationRelativeTo(null); // إظهار النافذة في منتصف الشاشة
    variableFrame.add(panel);
    variableFrame.setVisible(true);

    proceedButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int variableCount = Integer.parseInt(variableCountField.getText());
                if (variableCount < 2 || variableCount > 3) {
                    throw new NumberFormatException();
                }
                variableFrame.dispose();
                openCoefficientInput(variableCount);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح من المتغيرات (2 أو 3)", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openCoefficientInput(int variableCount) {
    JFrame coeffFrame = new JFrame("إدخال المعاملات");
    coeffFrame.setSize(400, 400);
    coeffFrame.setLocationRelativeTo(null); // إظهار النافذة في منتصف الشاشة

    JPanel coeffPanel = new JPanel(new GridLayout(variableCount, variableCount + 2, 5, 5));
    JTextField[][] coeffFields = new JTextField[variableCount][variableCount + 1];

    for (int i = 0; i < variableCount; i++) {
        for (int j = 0; j < variableCount; j++) {
            coeffFields[i][j] = new JTextField(3);
            coeffFields[i][j].setPreferredSize(new Dimension(50, 20)); // تصغير الحجم إلى النصف تقريباً
            coeffPanel.add(coeffFields[i][j]);
        }

        JLabel equalsLabel = new JLabel(" = ");
        equalsLabel.setForeground(Color.BLACK);
        coeffPanel.add(equalsLabel);

        coeffFields[i][variableCount] = new JTextField(3);
        coeffFields[i][variableCount].setPreferredSize(new Dimension(50, 20)); // تصغير الحجم إلى النصف تقريباً
        coeffPanel.add(coeffFields[i][variableCount]);
    }

    JButton solveButton = new JButton("حل");
    solveButton.setPreferredSize(new Dimension(160, 50)); // حجم الزر الضعف
    solveButton.setBackground(Color.BLACK); // لون الزر أسود
    solveButton.setForeground(Color.decode("#FFD700")); // النص باللون الذهبي
    
    coeffFrame.add(coeffPanel, BorderLayout.CENTER);

    JPanel buttonPanel = new JPanel(new FlowLayout());
    buttonPanel.add(solveButton);

    coeffFrame.add(buttonPanel, BorderLayout.SOUTH);
    coeffFrame.setVisible(true);

    // ActionListener لزر الحل العادي
    solveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            Object[][] coefficients = new Object[variableCount][variableCount];
            Object[] constants = new Object[variableCount];

            try {
                // قراءة المدخلات من الحقول
                for (int i = 0; i < variableCount; i++) {
                    for (int j = 0; j < variableCount; j++) {
                        coefficients[i][j] = Double.parseDouble(coeffFields[i][j].getText());
                    }
                    constants[i] = Double.parseDouble(coeffFields[i][variableCount].getText());
                }

                // حل النظام
                Object[] solution = solveEquations(coefficients, constants);

                // التحقق من الحل
                if (solution == null) {
                    JOptionPane.showMessageDialog(null, "النظام ليس له حل أو لديه عدد غير نهائي من الحلول", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // عرض الحل
                StringBuilder result = new StringBuilder("الحل:\n");
                for (int i = 0; i < solution.length; i++) {
                    result.append("x").append(i + 1).append(" = ").append(solution[i]).append("\n");
                }
                JOptionPane.showMessageDialog(null, result.toString(), "حل النظام", JOptionPane.INFORMATION_MESSAGE);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أعداد صحيحة أو عشرية صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private Double[] solveEquations(Object[][] coefficients, Object[] constants) {
    int n = coefficients.length;
    Double[][] augmentedMatrix = new Double[n][n + 1];

    // بناء المصفوفة الموسعة
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (coefficients[i][j] instanceof Number) {
                augmentedMatrix[i][j] = ((Number) coefficients[i][j]).doubleValue();
            } else {
                JOptionPane.showMessageDialog(null, "المصفوفة تحتوي على عناصر غير رقمية.", "خطأ", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        if (constants[i] instanceof Number) {
            augmentedMatrix[i][n] = ((Number) constants[i]).doubleValue(); // إضافة الثوابت
        } else {
            JOptionPane.showMessageDialog(null, "المصفوفة تحتوي على ثابت غير رقمي.", "خطأ", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    // تطبيق طريقة جاوس-جوردان
    for (int i = 0; i < n; i++) {
        // إذا كان العنصر الرئيسي صفرًا، نبحث عن صف يحتوي على عنصر رئيسي غير صفر
        if (augmentedMatrix[i][i] == 0) {
            boolean swapped = false;
            for (int k = i + 1; k < n; k++) {
                if (augmentedMatrix[k][i] != 0) {
                    // تبديل الصفوف
                    Double[] temp = augmentedMatrix[i];
                    augmentedMatrix[i] = augmentedMatrix[k];
                    augmentedMatrix[k] = temp;
                    swapped = true;
                    break;
                }
            }
            if (!swapped) {
                return null; // إذا لم نجد صفًا مناسبًا، فالنظام ليس له حل
            }
        }

        Double diagElement = augmentedMatrix[i][i];
        
        // قسمة الصف بالكامل على العنصر الرئيسي
        for (int j = 0; j <= n; j++) {
            augmentedMatrix[i][j] /= diagElement;
        }

        // القضاء على العناصر في العمود الحالي
        for (int k = 0; k < n; k++) {
            if (k != i) {
                Double factor = augmentedMatrix[k][i];
                for (int j = 0; j <= n; j++) {
                    augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
                }
            }
        }
    }

    // استخراج الحل
    Double[] solution = new Double[n];
    for (int i = 0; i < n; i++) {
        solution[i] = augmentedMatrix[i][n];
    }

    // التحقق من وجود صفوف غير مفيدة
    for (int i = 0; i < n; i++) {
        boolean allZeros = true;
        for (int j = 0; j < n; j++) {
            if (augmentedMatrix[i][j] != 0) {
                allZeros = false;
                break;
            }
        }
        if (allZeros && augmentedMatrix[i][n] != 0) {
            return null; // إذا كان صف يحتوي على أصفار في المعاملات ولكنه يحتوي على ثابت غير صفر، النظام ليس له حل
        }
    }

    return solution;
}






    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        openEquationSolver();
    }//GEN-LAST:event_jButton4ActionPerformed

    private String[] operationNames = new String[100]; // مصفوفة لتخزين أسماء العمليات

    private void saveResult(Object[][] matrix, String operationName) {
    if (resultCount < 100) { // التحقق من وجود مساحة في المصفوفة
        results[resultCount] = matrix;  // حفظ المصفوفة
        operationNames[resultCount] = operationName;  // حفظ اسم العملية
        resultCount++;
    } else {
        JOptionPane.showMessageDialog(null, "لقد وصلت إلى الحد الأقصى من النتائج المحفوظة.", "خطأ", JOptionPane.ERROR_MESSAGE);
}}
    private void displaySavedResults() {
    if (results == null || resultCount == 0) {
        JOptionPane.showMessageDialog(this, "لا توجد نتائج محفوظة.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    JPanel savedResultsPanel = new JPanel();
    savedResultsPanel.setLayout(new BoxLayout(savedResultsPanel, BoxLayout.Y_AXIS));  // تخطيط عمودي
    savedResultsPanel.setBorder(BorderFactory.createTitledBorder("المصفوفات المحفوظة"));

    // إضافة المصفوفات المحفوظة مع أسماء العمليات
    for (int i = 0; i < resultCount; i++) {
        // إضافة اسم العملية كـ JLabel
        JLabel resultNameLabel = new JLabel("العملية: " + operationNames[i]);  // استخدام operationNames
        resultNameLabel.setFont(new Font("Arial", Font.BOLD, 14));  // لتحديد نوع الخط
        savedResultsPanel.add(resultNameLabel);  // إضافة اسم العملية

        // عرض المصفوفة نفسها في JTextArea
        JTextArea matrixArea = new JTextArea();
        matrixArea.setEditable(false);
        matrixArea.setText(formatMatrix(results[i]));
        matrixArea.setBackground(Color.BLACK);
        matrixArea.setForeground(Color.WHITE);
        matrixArea.setCaretPosition(0);  // لضمان أن المؤشر يكون في بداية النص
        savedResultsPanel.add(new JScrollPane(matrixArea));  // إضافة النص داخل JScrollPane
    }

    // إنشاء ComboBox لاختيار المصفوفة
    String[] resultNamesDisplay = new String[resultCount];
    for (int i = 0; i < resultCount; i++) {
        resultNamesDisplay[i] = "نتيجة " + (i + 1);
    }
    JComboBox<String> matrixSelector = new JComboBox<>(resultNamesDisplay);

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    JScrollPane scrollPane = new JScrollPane(savedResultsPanel);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    panel.add(scrollPane);
    panel.add(matrixSelector);

    JOptionPane.showMessageDialog(this, panel, "اختر نتيجة", JOptionPane.INFORMATION_MESSAGE);
}







    
    private Object[][] getNewMatrix(int rows, int cols) {
    // إنشاء JPanel يحتوي على JTextFields لتمكين المستخدم من إدخال القيم
    JPanel matrixPanel = new JPanel();
    matrixPanel.setLayout(new GridLayout(rows, cols)); // تحديد التخطيط حسب عدد الصفوف والأعمدة

    // مصفوفة لحفظ JTextFields
    JTextField[][] fields = new JTextField[rows][cols];

    // إضافة JTextFields لكل عنصر في المصفوفة
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fields[i][j] = new JTextField(5);  // كل JTextField يحتوي على 5 حروف
            matrixPanel.add(fields[i][j]); // إضافة JTextField إلى JPanel
        }
    }

    // عرض نافذة لإدخال القيم
    int option = JOptionPane.showConfirmDialog(null, matrixPanel, "أدخل عناصر المصفوفة", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (option == JOptionPane.OK_OPTION) {
        // تحويل القيم المدخلة في JTextFields إلى مصفوفة من الأرقام
        Object[][] newMatrix = new Object[rows][cols];
        try {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    // تحويل النص إلى قيمة عددية
                    newMatrix[i][j] = Double.parseDouble(fields[i][j].getText());
                }
            }
            return newMatrix;  // إعادة المصفوفة المدخلة
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "الرجاء إدخال أرقام صحيحة فقط.", "خطأ", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    return null;  // إلغاء الإدخال إذا تم الضغط على "إلغاء"
}





// دالة لتنفيذ العمليات مع المصفوفات المدخلة
// دالة لتنفيذ العمليات مع المصفوفتين
        Object[][] resultMatrix = null;

private void performOperationWithMatrix(String operation, Object[][] matrix1, Object[][] matrix2) throws Exception {
    if (matrix1 == null || matrix2 == null) {
        JOptionPane.showMessageDialog(null, "إحدى المصفوفات غير موجودة.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // التحقق من الأبعاد المتوافقة إذا كانت العملية ليست ضرب
    if (!sameDimensions(matrix1, matrix2) && !operation.equals("ضرب")) {
        JOptionPane.showMessageDialog(null, "الأبعاد غير متوافقة.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Object[][] resultMatrix = null;
    switch (operation) {
        case "جمع":
            resultMatrix = addMatrices(matrix1, matrix2);
            saveResult(resultMatrix, "جمع المصفوفات");
            break;
        case "طرح":
            resultMatrix = subtractMatrices(matrix1, matrix2);
            saveResult(resultMatrix, "طرح المصفوفات");
            break;
        case "ضرب":
            if (matrix1[0].length != matrix2.length) {
                JOptionPane.showMessageDialog(null, "لا يمكن ضرب المصفوفات بسبب عدم توافق الأبعاد.", "خطأ", JOptionPane.ERROR_MESSAGE);
                return;
            }
            resultMatrix = multiplyMatrices(matrix1, matrix2);
            saveResult(resultMatrix, "ضرب المصفوفات");
            break;
        case "مقلوب":
            resultMatrix = transposeMatrix(matrix1); // افترضنا أن العملية هي المقلوب
            saveResult(resultMatrix, "مقلوب المصفوفة");
            break;
        case "معكوس":
            resultMatrix = invertMatrix((Double[][]) matrix1); // العملية الأخرى
            saveResult(resultMatrix, "معكوس المصفوفة");
            break;
        default:
            JOptionPane.showMessageDialog(null, "عملية غير مدعومة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            return;
    }

    if (resultMatrix != null) {
        displayResultMatrix(resultMatrix, operation);  // تمرير اسم العملية هنا
    }
}





private String[] resultNames = new String[100]; // افترض أن عدد النتائج سيكون محدود بـ 100
//private int resultCount = 0;  // عداد لحفظ عدد النتائج

private void displayResultMatrix(Object[][] result, String operationName) {
    // حفظ النتيجة مع اسم العملية
    resultNames[resultCount] = operationName;  // حفظ اسم العملية هنا
    results[resultCount] = result;  // حفظ النتيجة
    resultCount++;  // زيادة العداد

    // عرض النتيجة في نافذة
    JOptionPane.showMessageDialog(null, formatMatrix(result), "نتيجة العملية: " + operationName, JOptionPane.INFORMATION_MESSAGE);
}








// دالة لتنفيذ العملية على المصفوفة المحفوظة
private void performOperation(String operation, Object[][] selectedMatrix) {
    switch (operation) {
        case "جمع":
            Object[][] matrixToAdd = getAnotherMatrix(); // دالة لاختيار مصفوفة أخرى للجمع
            if (matrixToAdd != null && sameDimensions(selectedMatrix, matrixToAdd)) {
                Object[][] sumMatrix = addMatrices(selectedMatrix, matrixToAdd);
                displayResultMatrix((String[][]) sumMatrix);
            } else {
                JOptionPane.showMessageDialog(null, "الأبعاد غير متوافقة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case "طرح":
            Object[][] matrixToSubtract = getAnotherMatrix(); // دالة لاختيار مصفوفة أخرى للطرح
            if (matrixToSubtract != null && sameDimensions(selectedMatrix, matrixToSubtract)) {
                Object[][] diffMatrix = subtractMatrices(selectedMatrix, matrixToSubtract);
                displayResultMatrix((String[][]) diffMatrix);
            } else {
                JOptionPane.showMessageDialog(null, "الأبعاد غير متوافقة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case "ضرب":
            Object[][] matrixToMultiply = getAnotherMatrix(); // دالة لاختيار مصفوفة أخرى للضرب
            if (matrixToMultiply != null && selectedMatrix[0].length == matrixToMultiply.length) {
                Object[][] productMatrix = multiplyMatrices(selectedMatrix, matrixToMultiply);
                displayResultMatrix((String[][]) productMatrix);
            } else {
                JOptionPane.showMessageDialog(null, "الأبعاد غير متوافقة للضرب.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case "معكوس":
            try {
                Object[][] invertedMatrix = invertMatrix((Double[][]) selectedMatrix);
                displayResultMatrix((String[][]) invertedMatrix);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "لا يمكن حساب المعكوس، تأكد أن المصفوفة مربعة وغير مفردة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case "مقلوب":
            Object[][] transposedMatrix = transposeMatrix(selectedMatrix);
            displayResultMatrix((String[][]) transposedMatrix);
            break;
    }
}



// دالة لتحويل المصفوفة إلى نص لتوضيحها في JTextArea
private String formatMatrix(Object[][] matrix) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < matrix.length; i++) {
        for (int j = 0; j < matrix[i].length; j++) {
            sb.append(matrix[i][j]).append("\t");
        }
        sb.append("\n");
    }
    return sb.toString();
}


// دوال العمليات الحسابية الإضافية

// دالة الجمع
// دالة الجمع
private Object[][] addMatrices(Object[][] matrix1, Object[][] matrix2) {
    int rows = matrix1.length;
    int cols = matrix1[0].length;
    Object[][] result = new Object[rows][cols];
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // تحويل إلى Double قبل الجمع
            result[i][j] = ((Number) matrix1[i][j]).doubleValue() + ((Number) matrix2[i][j]).doubleValue();
        }
    }
    return result;
}

// دالة الطرح
private Object[][] subtractMatrices(Object[][] matrix1, Object[][] matrix2) {
    int rows = matrix1.length;
    int cols = matrix1[0].length;
    Object[][] result = new Object[rows][cols];
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // تحويل إلى Double قبل الطرح
            result[i][j] = ((Number) matrix1[i][j]).doubleValue() - ((Number) matrix2[i][j]).doubleValue();
        }
    }
    return result;
}

// دالة الضرب
private Object[][] multiplyMatrices(Object[][] matrix1, Object[][] matrix2) {
    int rows = matrix1.length;
    int cols = matrix2[0].length;
    int innerDim = matrix2.length;
    Object[][] result = new Object[rows][cols];

    // تهيئة المصفوفة النتيجة بالقيمة الافتراضية 0.0
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = 0.0;  // تهيئة القيم إلى 0.0 قبل الحساب
        }
    }

    // تنفيذ عملية ضرب المصفوفات
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            for (int k = 0; k < innerDim; k++) {
                // تحويل إلى Double قبل الضرب
                result[i][j] = ((Number) result[i][j]).doubleValue() + 
                               ((Number) matrix1[i][k]).doubleValue() * ((Number) matrix2[k][j]).doubleValue();
            }
        }
    }

    return result;
}



// دالة لمقارنة الأبعاد
private boolean sameDimensions(Object[][] matrix1, Object[][] matrix2) {
    if (matrix1 == null || matrix2 == null) {
        return false;
    }
    // التأكد من أن جميع العناصر أرقام
    for (int i = 0; i < matrix1.length; i++) {
        for (int j = 0; j < matrix1[i].length; j++) {
            if (!(matrix1[i][j] instanceof Number) || !(matrix2[i][j] instanceof Number)) {
                return false; // إذا كان هناك عنصر غير رقمي
            }
        }
    }
    return matrix1.length == matrix2.length && matrix1[0].length == matrix2[0].length;
}


// دالة لاختيار مصفوفة إضافية
private Object[][] getAnotherMatrix() {
    if (results == null || results.length == 0) {
        JOptionPane.showMessageDialog(null, "لا توجد مصفوفات محفوظة للاختيار منها.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return null;
    }
    return results[0]; // مجرد مثال، يمكن تغيير الطريقة حسب التطبيق
}





    
    private void createmat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createmat1ActionPerformed
        displaySavedResults();
    }//GEN-LAST:event_createmat1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        parent.removeAll();
        parent.add(Ope);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void openMatrixInputDialogForDivision() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(6);
    JTextField colsField = new JTextField(6);
    JTextField divisorField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل عدد الصفوف:"));
    panel.add(rowsField);
    panel.add(new JLabel("أدخل عدد الأعمدة:"));
    panel.add(colsField);
    panel.add(new JLabel("أدخل العدد للقسمة عليه:"));
    panel.add(divisorField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowsField.getText());
                int cols = Integer.parseInt(colsField.getText());
    double divisor = Double.parseDouble(divisorField.getText());

                if (rows <= 0 || cols <= 0) {
                    JOptionPane.showMessageDialog(null, "يجب أن تكون الأبعاد أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (divisor == 0) {
                    JOptionPane.showMessageDialog(null, "لا يمكن القسمة على الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                inputFrame.dispose();
                openMatrixPanelForDivision(rows, cols, divisor);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixPanelForDivision(int rows, int cols, Object divisor) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    String[][] matrix = new String[rows][cols];  // تغيير إلى String[][]

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ المصفوفة");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = matrixFields[i][j].getText();  // حفظ النصوص كما هي
                    }
                }
                Object[][] resultMatrix = divideMatrixByScalar(matrix, (double) divisor);
                displayResultMatrix3(resultMatrix);
                matrixFrame.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void askForModificationOrDivisor() {
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(null, "هل تريد تعديل المصفوفة الحالية؟", "تعديل المصفوفة", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            openMatrixPanelForModification1();
        } else {
            askForDivisor();
        }
    } else {
        JOptionPane.showMessageDialog(null, "لا توجد مصفوفة محفوظة. يرجى إنشاء مصفوفة جديدة.");
        openMatrixInputDialogForDivision();
    }
}

private void openMatrixPanelForModification1() {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame matrixFrame = new JFrame("تعديل القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(String.valueOf(matrix[i][j]), 5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ التعديلات");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                matrixFrame.dispose();
                askForDivisor();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void askForDivisor() {
    try {
        // استخدام double بدلاً من Object
        double divisor = Double.parseDouble(JOptionPane.showInputDialog("أدخل العدد للقسمة عليه:"));
        // استدعاء الدالة مع divisor كـ double
        String[][] resultMatrix = divideMatrixByScalar((String[][]) matrix, divisor);
        displayResultMatrix3(resultMatrix);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
    }
}


private String[][] divideMatrixByScalar(String[][] matrix, double scalar) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    String[][] resultMatrix = new String[rows][cols];

    if (scalar == 0) {
        JOptionPane.showMessageDialog(null, "لا يمكن القسمة على الصفر.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return resultMatrix; // العودة إلى مصفوفة فارغة إذا كانت القسمة على صفر
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (isVariable(matrix[i][j])) {
                // إذا كانت القيمة هي متغير، عرضها مع العدد
                resultMatrix[i][j] = matrix[i][j] + "/" + scalar;
            } else {
                try {
                    // إذا كانت القيمة رقمًا ثابتًا
                    double value = Double.parseDouble(matrix[i][j]);
                    resultMatrix[i][j] = String.valueOf(value / scalar); // القسمة على العدد
                } catch (NumberFormatException ex) {
                    resultMatrix[i][j] = matrix[i][j]; // إذا كانت قيمة غير قابلة للتحويل إلى رقم
                }
            }
        }
    }
    return resultMatrix;
}

private boolean isVariable(String str) {
    // تحقق مما إذا كان النص يحتوي على حرف واحد فقط مثل "x" أو "y"
    return str != null && str.matches("[a-zA-Z]");
}



private void displayResultMatrix3(Object[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;

    if (resultCount < results.length) {
        results[resultCount] = matrix;
        resultCount++;
    } else {
        showErrorMessage("تم الوصول إلى الحد الأقصى من النتائج المخزنة.");
    }

    JFrame resultFrame = new JFrame("نتيجة القسمة");
    resultFrame.setSize(500, 500);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(matrix[i][j]));
            resultField.setEditable(false);
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null);
    resultFrame.setVisible(true);
}

    
    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
    JButton newMatrixButton = new JButton("إنشاء مصفوفة جديدة");
    JButton existingMatrixButton = new JButton("استخدام المصفوفة الموجودة");

    panel.add(newMatrixButton);
    panel.add(existingMatrixButton);

    JFrame choiceFrame = new JFrame("اختيار المصفوفة");
    choiceFrame.setSize(300, 150);
    choiceFrame.add(panel);
    choiceFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    choiceFrame.setVisible(true);

    // إذا اختار إنشاء مصفوفة جديدة
    newMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            openMatrixInputDialogForDivision(); // فتح نافذة إدخال حجم المصفوفة
        }
    });

    // إذا اختار استخدام المصفوفة الموجودة
    existingMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            if (matrix == null) {
                JOptionPane.showMessageDialog(null, "لا يوجد مصفوفة محفوظة. يُرجى إنشاء مصفوفة جديدة.");
                openMatrixInputDialogForDivision();
            } else {
                displayMatrix();
                askForModificationOrDivisor(); // سؤال المستخدم
            }
        }
    });
    }//GEN-LAST:event_jButton10ActionPerformed

    // دالة لعرض الخيارات
private void showMatrixOptionsDialog() {
    String[] options = {"العمل على المصفوفة الحالية", "إنشاء مصفوفة جديدة"};
    int choice = JOptionPane.showOptionDialog(
            this,
            "اختر الخيار الذي ترغب فيه:",
            "اختيار المصفوفة",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
    );

    if (choice == 0) {
        if (matrix != null) {
            if (isSquareMatrix(matrix)) {
                try {
                    Double[][] doubleMatrix = convertToDoubleMatrix(matrix);
                    Object[][] invertedMatrix = invertMatrix(doubleMatrix);
                    displaySumMatrix(invertedMatrix);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "يرجى التأكد من إدخال أرقام صحيحة فقط.", "خطأ", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "لا يمكن حساب المقلوب: " + ex.getMessage(), "خطأ", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "يجب أن تكون المصفوفة مربعة لحساب المقلوب.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "لا توجد مصفوفة حالية.", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    } else if (choice == 1) {
        openMatrixInputForInversionDialog();
    }
}

// دالة لفحص ما إذا كانت المصفوفة مربعة
private boolean isSquareMatrix(Object[][] matrix) {
    return matrix != null && matrix.length > 0 && matrix.length == matrix[0].length;
}

private Double[][] convertToDoubleMatrix(Object[][] matrix) throws NumberFormatException {
    int rows = matrix.length;
    int cols = matrix[0].length;
    Double[][] doubleMatrix = new Double[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            doubleMatrix[i][j] = Double.parseDouble(matrix[i][j].toString());
        }
    }
    return doubleMatrix;
}



// دالة إدخال حجم وقيم المصفوفة الجديدة
private void openMatrixInputForInversionDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField sizeField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل حجم المصفوفة (مربعة):"));
    panel.add(sizeField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);
    inputFrame.setVisible(true);

    generateButton.addActionListener(e -> {
        try {
            int size = Integer.parseInt(sizeField.getText());
            if (size <= 0) {
                JOptionPane.showMessageDialog(null, "يجب أن يكون حجم المصفوفة أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                return;
            }
            inputFrame.dispose();
            openMatrixPanelForInversion(size);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "يرجى إدخال رقم صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    });
}

// دالة إدخال قيم المصفوفة الجديدة وحساب مقلوبها
private void openMatrixPanelForInversion(int size) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(size, size, 5, 5));
    JTextField[][] matrixFields = new JTextField[size][size];
    Object[][] newMatrix = new Object[size][size];

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton invertButton = new JButton("احصل على المقلوب");
    invertButton.addActionListener(e -> {
        try {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    newMatrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                }
            }
            Object[][] invertedMatrix = invertMatrix(convertToDoubleMatrix(newMatrix));
            displaySumMatrix(invertedMatrix);
            matrixFrame.dispose();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(matrixFrame, "لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة وغير مفردة.", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(invertButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

// دالة عرض النتيجة
private void displaySumMatrix(Object[][] matrix) {
    resultMatrix = matrix; // حفظ النتيجة في الحافظة
    StringBuilder resultText = new StringBuilder("مصفوفة الناتج:\n");
    for (Object[] row : matrix) {
        for (Object val : row) {
            resultText.append(String.format("%8.2f", val)).append(" ");
        }
        resultText.append("\n");
    }

    JTextArea resultArea = new JTextArea(resultText.toString());
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);

    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    JButton transposeButton = new JButton("تحويل الصفوف إلى أعمدة");
    JButton determinantButton = new JButton("حساب المحدد");

    JPanel buttonPanel = new JPanel();
    buttonPanel.add(transposeButton);
    buttonPanel.add(determinantButton);

    JPanel resultPanel = new JPanel(new BorderLayout());
    resultPanel.setBackground(Color.BLACK);
    resultPanel.add(scrollPane, BorderLayout.CENTER);
    resultPanel.add(buttonPanel, BorderLayout.SOUTH);

    JDialog dialog = new JOptionPane(resultPanel, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION).createDialog(this, "مصفوفة الناتج");
    dialog.setSize(400, 350);

    transposeButton.addActionListener(e -> {
        dialog.dispose();
        Object[][] transposedMatrix = transposeMatrix(resultMatrix); // استخدام الحافظة
        displaySumMatrix(transposedMatrix); // عرض المصفوفة المحوّلة
    });

    determinantButton.addActionListener(e -> {
        try {
            double determinant = calculateDeterminant((double[][])(Object)resultMatrix); // استخدام الحافظة
            JOptionPane.showMessageDialog(null, "محدد المصفوفة هو: " + determinant, "محدد المصفوفة", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "حدث خطأ أثناء حساب المحدد", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    });

    dialog.setVisible(true);
}





private Object[][] transposeMatrix(Object[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    Object[][] transposedMatrix = new Object[cols][rows];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }
    return transposedMatrix;
}

// دالة لحساب المحدد
private String calculateDeterminant2(Object[][] matrix) {
    int n = matrix.length;
    if (n == 1) return matrix[0][0].toString();

    String determinant = "0"; // تخزين المحدد كـ String (لأنه قد يحتوي على متغيرات)
    for (int i = 0; i < n; i++) {
        Object[][] minor = new Object[n - 1][n - 1];
        for (int j = 1; j < n; j++) {
            for (int k = 0, col = 0; k < n; k++) {
                if (k != i) {
                    minor[j - 1][col++] = matrix[j][k];
                }
            }
        }
        // إذا كانت القيمة في المصفوفة متغيرًا، ستحتاج إلى التعامل مع العمليات الرمزية
        String minorDeterminant = calculateDeterminant2(minor);
        String term = matrix[0][i].toString();
        if (isVariable(term)) {
            // إذا كانت القيمة متغيرًا، لا نقوم بحساب القيمة بشكل نهائي
            // نضع المتغير في صيغة رمزية مع إضافة القسمة مع المحدد الجزئي
            determinant = addTerms(determinant, (i % 2 == 0 ? "+" : "-") + term + " * " + minorDeterminant);
        } else {
            // إذا كانت القيمة رقمًا ثابتًا
            double value = Double.parseDouble(term);
            String result = String.valueOf(value) + " * " + minorDeterminant;
            determinant = addTerms(determinant, (i % 2 == 0 ? "+" : "-") + result);
        }
    }
    return determinant;
}

// فحص إذا كانت القيمة متغيرًا
//private boolean isVariable(String value) {
//    return value.equals("x") || value.equals("y") || value.equals("z");
//}

// إضافة تعبير رياضي إلى المحدد
private String addTerms(String term1, String term2) {
    // إزالة المسافات الإضافية
    term1 = term1.trim();
    term2 = term2.trim();

    // إذا كان أحد المصطلحين "0"، النتيجة هي المصطلح الآخر
    if (term1.equals("0")) return term2;
    if (term2.equals("0")) return term1;

    // جمع الأرقام فقط
    if (term1.matches("-?\\d+(\\.\\d+)?") && term2.matches("-?\\d+(\\.\\d+)?")) {
        return String.valueOf(Double.parseDouble(term1) + Double.parseDouble(term2));
    }

    // جمع المتغيرات المتشابهة مثل: 2X + 5X => 7X
    if (term1.matches("-?\\d*[a-zA-Z]") && term2.matches("-?\\d*[a-zA-Z]")) {
        String variable1 = term1.replaceAll("[^a-zA-Z]", "");
        String variable2 = term2.replaceAll("[^a-zA-Z]", "");

        if (variable1.equals(variable2)) {
            double coefficient1 = term1.replace(variable1, "").isEmpty() ? 1 : Double.parseDouble(term1.replace(variable1, ""));
            double coefficient2 = term2.replace(variable2, "").isEmpty() ? 1 : Double.parseDouble(term2.replace(variable2, ""));
            return (coefficient1 + coefficient2) + variable1;
        }
    }

    // إذا كان أحدهما رقمًا والآخر يحتوي على متغيرات، يتم الإضافة بعلامة "+"
    if ((term1.matches("-?\\d+(\\.\\d+)?") && term2.matches(".*[a-zA-Z].*")) || 
        (term2.matches("-?\\d+(\\.\\d+)?") && term1.matches(".*[a-zA-Z].*"))) {
        return term1 + " + " + term2;
    }

    // الجمع الافتراضي
    return term1 + " + " + term2;
}

private Object[][] invertMatrix(Double[][] matrix) throws Exception {
    if (!isSquareMatrix(matrix)) {
        throw new Exception("المصفوفة ليست مربعة");
    }

    int n = matrix.length;
    Double[][] identity = new Double[n][n];
    Double[][] copy = new Double[n][n];

    // تهيئة مصفوفة الهوية ونسخ المصفوفة الأصلية
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            identity[i][j] = (i == j) ? 1.0 : 0.0;
            copy[i][j] = matrix[i][j];
        }
    }

    // تطبيق خوارزمية جاوس-جوردان
    for (int i = 0; i < n; i++) {
        // البحث عن العنصر الرئيسي وتعديله ليكون 1
        double pivot = copy[i][i];
        if (pivot == 0) {
            throw new Exception("المصفوفة غير قابلة للانعكاس (مفردة).");
        }
        for (int j = 0; j < n; j++) {
            copy[i][j] /= pivot;
            identity[i][j] /= pivot;
        }

        // جعل جميع العناصر في العمود i باستثناء العنصر الرئيسي صفراً
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = copy[k][i];
                for (int j = 0; j < n; j++) {
                    copy[k][j] -= factor * copy[i][j];
                    identity[k][j] -= factor * identity[i][j];
                }
            }
        }
    }

    // حفظ المعكوس في الحافظة
    if (resultCount < results.length) {
        results[resultCount] = identity; // حفظ المعكوس
        resultCount++;
    } else {
        JOptionPane.showMessageDialog(null, "لا يمكن حفظ المزيد من النتائج.", "خطأ", JOptionPane.ERROR_MESSAGE);
    }

    return identity;
}
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    // إذا كانت المصفوفة موجودة، اسأل المستخدم إذا كان يريد استخدامها
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(this, "هل تريد استخدام المصفوفة الموجودة؟", "اختيار المصفوفة", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // استخدام المصفوفة الحالية
            try {
                Double[][] doubleMatrix = convertToDoubleMatrix(matrix); // تحويل المصفوفة إلى Double
                Object[][] invertedMatrix = invertMatrix(doubleMatrix); // حساب المقلوب
                displayResultMatrix(invertedMatrix); // عرض النتيجة
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة وغير مفردة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // إنشاء مصفوفة جديدة
            openMatrixInputForInversionDialog();
        }
    } else {
        // إذا لم تكن هناك مصفوفة حالية
        openMatrixInputForInversionDialog();
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        parent.removeAll();
        parent.add(mainpanel);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_jButton12ActionPerformed

    private Map<String, Double> parseExpression(String expression) {
        Map<String, Double> terms = new HashMap<>();
        String[] parts = expression.split("\\s*\\+\\s*");

        for (String part : parts) {
            if (part.matches("-?\\d+(\\.\\d+)?")) { // رقم ثابت
                terms.put("constant", terms.getOrDefault("constant", 0.0) + Double.parseDouble(part));
            } else if (part.matches("-?\\d*(\\.\\d+)?[a-zA-Z]")) { // متغير بمعامل
                String variable = part.replaceAll("-?\\d*(\\.\\d+)?", "");
                double coefficient = Double.parseDouble(part.replace(variable, "").isEmpty() ? "1" : part.replace(variable, ""));
                terms.put(variable, terms.getOrDefault(variable, 0.0) + coefficient);
            } else {
                throw new IllegalArgumentException("تعبير غير صالح: " + part);
            }
        }
        return terms;
    }

    
    
    
    private boolean isValidInput(String text) {
    // التحقق من أن المدخل يتكون من حرف واحد أو رقم أو مزيج بين حرف واحد ورقم
    return text.matches("[-+]?\\d*(\\.\\d+)?[a-zA-Z]*") && text.length() <= 20;
}
    
    private void sumMatricesWithVariables(JTextField[][][] matrixFields, int rows, int cols, int numMatrices) {
        String[][] resultMatrix = new String[rows][cols];

        for (int j = 0; j < rows; j++) {
            for (int k = 0; k < cols; k++) {
                Map<String, Double> totalTerms = new HashMap<>();

                // جمع القيم من كل مصفوفة
                for (int i = 0; i < numMatrices; i++) {
                    String expression = matrixFields[i][j][k].getText();
                    if (expression.isEmpty()) expression = "0";

                    try {
                        Map<String, Double> terms = parseExpression(expression);
                        for (String var : terms.keySet()) {
                            totalTerms.put(var, totalTerms.getOrDefault(var, 0.0) + terms.get(var));
                        }
                    } catch (Exception e) {
                        System.err.println("خطأ في المدخلات في الخلية [" + i + "][" + j + "][" + k + "]: " + expression);
                    }
                }

                resultMatrix[j][k] = formatResult(totalTerms);
            }
        }

        displaySumMatrixWithVariables(resultMatrix);
    }




    
    private void showErrorMessage(String message) {
    JOptionPane optionPane = new JOptionPane(message, JOptionPane.ERROR_MESSAGE);
    JDialog dialog = optionPane.createDialog(null, "خطأ");
    dialog.setLocationRelativeTo(null); // جعل النافذة تظهر في المنتصف
    dialog.setVisible(true);
}
    
    private JPanel createMatrixPanel(JTextField[][] matrixFields, int rows, int cols, int matrixIndex) {
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        // عنوان المصفوفة
        String labelName = (matrixIndex < 26) ? String.valueOf((char) ('A' + matrixIndex)) : "M" + (matrixIndex + 1);
        JLabel label = new JLabel("مصفوفة " + labelName, SwingConstants.CENTER);
        label.setFont(new Font("Arial", Font.BOLD, 18));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = cols;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(label, gbc);

        // إدخال القيم
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrixFields[i][j] = new JTextField(5);
                matrixFields[i][j].setHorizontalAlignment(JTextField.CENTER);
                matrixFields[i][j].setFont(new Font("Arial", Font.PLAIN, 14));

                gbc.gridx = j;
                gbc.gridy = i + 1;
                gbc.gridwidth = 1;

                // التحقق من صحة الإدخال
                JTextField field = matrixFields[i][j];
                field.getDocument().addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) { validateCellInput(field); }
                    @Override
                    public void removeUpdate(DocumentEvent e) { validateCellInput(field); }
                    @Override
                    public void changedUpdate(DocumentEvent e) { validateCellInput(field); }
                });

                panel.add(matrixFields[i][j], gbc);
            }
        }
        return panel;
    }

// دالة لعرض الرسائل العامة في المنتصف
private void showMessage(String message, String title) {
    JOptionPane optionPane = new JOptionPane(message, JOptionPane.INFORMATION_MESSAGE);
    JDialog dialog = optionPane.createDialog(null, title);
    dialog.setLocationRelativeTo(null); // جعل النافذة تظهر في المنتصف
    dialog.setVisible(true);
}

private void openMatrixInputPanels(int numMatrices, int rows, int cols) {
        if (rows <= 0 || cols <= 0 || numMatrices <= 0) {
            showErrorMessage("عدد المصفوفات، الصفوف والأعمدة يجب أن يكونوا أكبر من 0.");
            return;
        }

        JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
        matrixFrame.setSize(600, 600);

        JPanel matrixPanel = new JPanel(new GridLayout(numMatrices, 1));
        JTextField[][][] matrixFields = new JTextField[numMatrices][rows][cols];

        // إنشاء مصفوفات الإدخال
        for (int i = 0; i < numMatrices; i++) {
            JPanel singleMatrixPanel = createMatrixPanel(matrixFields[i], rows, cols, i);
            matrixPanel.add(singleMatrixPanel);
        }

        JScrollPane scrollPane = new JScrollPane(matrixPanel);
        scrollPane.setPreferredSize(new Dimension(580, 400));

        JButton sumButton = new JButton("جمع المصفوفات");
        sumButton.addActionListener(e -> {
            if (!areAllFieldsValid(matrixFields, numMatrices, rows, cols)) {
                showErrorMessage("يرجى إدخال قيم صالحة في جميع الخلايا.");
                return;
            }
            sumMatricesWithVariables(matrixFields, rows, cols, numMatrices);
        });

        matrixFrame.add(scrollPane, BorderLayout.CENTER);
        matrixFrame.add(sumButton, BorderLayout.SOUTH);
        matrixFrame.setLocationRelativeTo(null);
        matrixFrame.setVisible(true);
    }


private void displaySumMatrixWithVariables(String[][] resultMatrix) {
        JFrame resultFrame = new JFrame("Matrix Result");
        resultFrame.setSize(500, 500);

        JPanel panel = new JPanel(new GridLayout(resultMatrix.length, resultMatrix[0].length, 5, 5));
        for (String[] row : resultMatrix) {
            for (String cell : row) {
                JTextField textField = new JTextField(cell);
                textField.setHorizontalAlignment(JTextField.CENTER);
                textField.setEditable(false);
                panel.add(textField);
            }
        }

        resultFrame.add(new JScrollPane(panel));
        resultFrame.setLocationRelativeTo(null);
        resultFrame.setVisible(true);
    }

private String formatResult(Map<String, Double> terms) {
        StringBuilder result = new StringBuilder();

        if (terms.containsKey("constant")) {
            result.append(terms.get("constant")).append(" ");
            terms.remove("constant");
        }

        for (String var : terms.keySet()) {
            double coefficient = terms.get(var);
            if (coefficient != 0) {
                if (result.length() > 0 && coefficient > 0) {
                    result.append("+ ");
                }
                result.append(coefficient).append(var).append(" ");
            }
        }

        return result.toString().trim();
    }

// دالة التحقق من صحة المدخلات (تقبل الأرقام والحروف فقط)


private void validateCellInput(JTextField textField) {
        String text = textField.getText();
        if (!text.matches("-?\\d*(\\.\\d+)?([a-zA-Z])?")) {
            textField.setBackground(Color.RED);
        } else {
            textField.setBackground(Color.WHITE);
        }
    }

// دالة للتحقق من صلاحية جميع الحقول في المصفوفات
private boolean areAllFieldsValid(JTextField[][][] matrixFields, int numMatrices, int rows, int cols) {
        for (int i = 0; i < numMatrices; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k < cols; k++) {
                    String text = matrixFields[i][j][k].getText();
                    if (!text.matches("-?\\d*(\\.\\d+)?([a-zA-Z])?")) {
                        return false;
                    }
                }
            }
        }
        return true;
    }



// هذه متغير للتحقق مما إذا تم عرض الرسالة بالفعل أم لا
private boolean errorDisplayed = false;

// الدالة لإعادة تعيين حالة الخطأ عند تعديل الخلايا
private void resetErrorState() {
    errorDisplayed = false;
}

// عندما يتم تعديل النص في أي خلية، نقوم بالتحقق من المدخلات مجددًا
// إضافة KeyListener لكل textField








private void displayCustomResult(Map<String, Double> sumMap) {
    StringBuilder resultText = new StringBuilder("مصفوفة الناتج:\n");
    for (Map.Entry<String, Double> entry : sumMap.entrySet()) {
        String key = entry.getKey();
        Double value = entry.getValue();
        if (key.equals("constant")) {
            resultText.append(String.format("%8.2f", value)).append(" ");
        } else {
            resultText.append(String.format("%8.2f%s", value, key)).append(" ");
        }
    }
    JTextArea resultArea = new JTextArea(resultText.toString());
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);

    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    JOptionPane.showMessageDialog(this, scrollPane, "مصفوفة الناتج", JOptionPane.INFORMATION_MESSAGE);
}




private void displaySumMatrix21(Object[][] sumMatrix) {
    if (resultCount >= results.length) {
        showErrorMessage("لا يمكن حفظ نتائج إضافية. حجم مصفوفة النتائج ممتلئ.");
        return;
    }

    results[resultCount] = sumMatrix;
    resultCount++;

    int rows = sumMatrix.length;
    int cols = sumMatrix[0].length;
    StringBuilder resultText = new StringBuilder("مصفوفة الناتج:\n");
    for (Object[] row : sumMatrix) {
        for (Object val : row) {
            resultText.append(String.format("%8.2f", val)).append(" ");
        }
        resultText.append("\n");
    }

    JTextArea resultArea = new JTextArea(resultText.toString());
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);

    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 200));

    JPanel resultPanel = new JPanel(new BorderLayout());
    resultPanel.setBackground(Color.BLACK);
    resultPanel.add(scrollPane, BorderLayout.CENTER);

    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new FlowLayout());

    JDialog dialog = new JOptionPane(resultPanel, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION).createDialog(this, "مصفوفة الناتج");
    dialog.setSize(400, 300);

    if (rows == cols) {
        JButton determinantButton = new JButton("احسب المحدد");
        determinantButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object determinant = calculateDeterminant9(sumMatrix);
                showResult("قيمة المحدد هي: " + determinant, "المحدد");
            }
        });
        buttonPanel.add(determinantButton);

        JButton inverseButton = new JButton("احسب المعكوس");
        inverseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Object[][] inverseMatrix = invertMatrix0(sumMatrix);
                    dialog.dispose();
                    displaySumMatrix21(inverseMatrix);
                } catch (ArithmeticException ex) {
                    dialog.dispose();
                    showErrorMessage("لا يمكن حساب المعكوس. المحدد يساوي صفر.");
                }
            }
        });
        buttonPanel.add(inverseButton);
    }

    JButton transposeButton = new JButton("احسب المنقول");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            Object[][] transposedMatrix = transposeMatrix0(sumMatrix);
            dialog.dispose();
            displaySumMatrix21(transposedMatrix);
        }
    });
    buttonPanel.add(transposeButton);

    resultPanel.add(buttonPanel, BorderLayout.SOUTH);
    dialog.setLocationRelativeTo(null); // التأكد من عرض النافذة في المنتصف
    dialog.setVisible(true);
}
private Double toDouble(Object value) {
    if (value instanceof Double) {
        return (Double) value;
    } else if (value instanceof Integer) {
        return ((Integer) value).doubleValue();
    } else if (value instanceof String) {
        try {
            return Double.parseDouble((String) value); // إذا كانت القيمة نصية وتحمل رقم
        } catch (NumberFormatException e) {
            return 0.0; // في حالة عدم القدرة على التحويل إلى عدد
        }
    }
    return 0.0; // القيمة الافتراضية إذا لم يكن النوع مناسب
}

private void checkAndPerformCalculation(JTextField[][][] matrixFields, int numMatrices, int rows, int cols) {
    // التحقق من صحة المدخلات قبل القيام بأي عمليات حسابية
    if (!areAllFieldsValid(matrixFields, numMatrices, rows, cols)) {
        showErrorMessage("يرجى إدخال قيم صالحة في جميع الخلايا.");
        return;
    }

    // إجراء العمليات الحسابية بعد التأكد من صحة المدخلات
    // على سبيل المثال: sumMatricesWithVariables(matrixFields, rows, cols, numMatrices);
}

private void showResult(String message, String title) {
    JTextArea resultArea = new JTextArea(message);
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);
    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 100));
    JOptionPane.showMessageDialog(this, scrollPane, title, JOptionPane.INFORMATION_MESSAGE);
}



private Object[][] transposeMatrix0(Object[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    Object[][] transposed = new Object[cols][rows];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
    return transposed;
}

private Object[][] invertMatrix0(Object[][] matrix) throws ArithmeticException {
    int n = matrix.length;
    Object[][] augmentedMatrix = new Object[n][2 * n];
    Object[][] inverseMatrix = new Object[n][n];

    // إنشاء مصفوفة موسعة لإجراء العمليات
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] instanceof Number) {
                augmentedMatrix[i][j] = ((Number) matrix[i][j]).doubleValue();
            } else {
                throw new ArithmeticException("المصفوفة تحتوي على عناصر غير رقمية، لا يمكن حساب المعكوس.");
            }
        }
        augmentedMatrix[i][i + n] = 1.0; // تعيين القيم في مصفوفة الوحدة
    }

    // إجراء عمليات الصفوف لخفض المصفوفة إلى الشكل القياسي
    for (int i = 0; i < n; i++) {
        double pivot = (double) augmentedMatrix[i][i];
        if (pivot == 0) {
            throw new ArithmeticException("المحدد يساوي صفر، لا يمكن حساب المعكوس.");
        }
        for (int j = 0; j < 2 * n; j++) {
            augmentedMatrix[i][j] = (double) augmentedMatrix[i][j] / pivot;
        }
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = (double) augmentedMatrix[k][i];
                for (int j = 0; j < 2 * n; j++) {
                    augmentedMatrix[k][j] = (double) augmentedMatrix[k][j] - factor * (double) augmentedMatrix[i][j];
                }
            }
        }
    }

    // استخراج المصفوفة المعكوسة
    for (int i = 0; i < n; i++) {
        System.arraycopy(augmentedMatrix[i], n, inverseMatrix[i], 0, n);
    }

    return inverseMatrix;
}


private Double calculateDeterminant9(Object[][] matrix) {
    int n = matrix.length;
    
    // التحقق من أن المصفوفة تحتوي على صفوف وأعمدة
    if (n == 1) {
        return toDouble(matrix[0][0]); // تحويل إلى Double
    }
    
    // إذا كانت المصفوفة 2x2
    if (n == 2) {
        return toDouble(matrix[0][0]) * toDouble(matrix[1][1]) - toDouble(matrix[0][1]) * toDouble(matrix[1][0]);
    }
    
    Double determinant = 0.0; // تعيين القيمة الابتدائية للمحدد كـ 0
    for (int i = 0; i < n; i++) {
        // إنشاء مصفوفة فرعية لاستبعاد الصف الأول والعمود الحالي
        Object[][] subMatrix = new Object[n - 1][n - 1];
        for (int j = 1; j < n; j++) {
            int colIndex = 0;
            for (int k = 0; k < n; k++) {
                if (k == i) continue; // تخطي العمود الذي يتم استبعاده
                subMatrix[j - 1][colIndex++] = matrix[j][k];
            }
        }
        // حساب المحدد باستخدام التوسع عبر الصف الأول
        determinant += Math.pow(-1, i) * toDouble(matrix[0][i]) * calculateDeterminant9(subMatrix);
    }
    return determinant;
}

private JLabel createStyledLabel(String text) {
    JLabel label = new JLabel(text, SwingConstants.CENTER);
    label.setFont(new Font("SansSerif", Font.BOLD, 18)); // تحديد الخط كـ Bold وحجم 18
    label.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0)); // إضافة مسافة حول النص بدلاً من تعيين الأبعاد
    return label;
}


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    JPanel panel = new JPanel(new GridBagLayout());
panel.setBackground(Color.BLACK);
GridBagConstraints gbc = new GridBagConstraints();
Font font = new Font("Arial", Font.PLAIN, 18);

gbc.fill = GridBagConstraints.HORIZONTAL;
gbc.insets = new Insets(5, 0, 5, 0); // مساحة بين العناصر

// إعداد الـ JLabel ليكون بعرض الـ JFrame
JLabel matricesLabel = new JLabel("ادخل عدد المصفوفات:", SwingConstants.CENTER);
matricesLabel.setFont(font);
matricesLabel.setForeground(Color.YELLOW);
matricesLabel.setOpaque(true);
matricesLabel.setBackground(Color.BLACK);
gbc.gridx = 0;
gbc.gridy = 0;
gbc.gridwidth = 2;
panel.add(matricesLabel, gbc);

// إعداد JTextField مع JLabel بجانبه
gbc.gridwidth = 1;
gbc.gridx = 0;
gbc.gridy = 1;
JTextField numMatricesField = new JTextField(7); // مضاعفة العرض
numMatricesField.setFont(font);
gbc.anchor = GridBagConstraints.CENTER;
panel.add(numMatricesField, gbc);

gbc.gridx = 0;
gbc.gridy = 2;
JLabel rowsLabel = new JLabel("ادخل عدد الصفوف:", SwingConstants.CENTER);
rowsLabel.setFont(font);
rowsLabel.setForeground(Color.YELLOW);
panel.add(rowsLabel, gbc);

gbc.gridy = 3;
JTextField rowsField = new JTextField(7); // مضاعفة العرض
rowsField.setFont(font);
panel.add(rowsField, gbc);

gbc.gridy = 4;
JLabel colsLabel = new JLabel("ادخل عدد الأعمدة:", SwingConstants.CENTER);
colsLabel.setFont(font);
colsLabel.setForeground(Color.YELLOW);
panel.add(colsLabel, gbc);

gbc.gridy = 5;
JTextField colsField = new JTextField(7); // مضاعفة العرض
colsField.setFont(font);
panel.add(colsField, gbc);

// إعداد الزر
JButton generateButton = new JButton("إنشاء المصفوفات");
generateButton.setFont(font);
generateButton.setBackground(Color.BLACK);
generateButton.setForeground(Color.YELLOW);
gbc.gridy = 6;
gbc.gridwidth = 2;
panel.add(generateButton, gbc);

JFrame inputFrame = new JFrame("إدخال عدد وحجم المصفوفات");
inputFrame.setSize(400, 300);
inputFrame.add(panel);
inputFrame.setLocationRelativeTo(null);
inputFrame.setVisible(true);

generateButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            int numMatrices = Integer.parseInt(numMatricesField.getText());
            int rows = Integer.parseInt(rowsField.getText());
            int cols = Integer.parseInt(colsField.getText());

            if (numMatrices <= 0 || rows <= 0 || cols <= 0) {
                showErrorMessage("عدد المصفوفات، الصفوف والأعمدة يجب أن يكونوا أكبر من 0");
                return;
            }

            inputFrame.dispose();
            openMatrixInputPanels(numMatrices, rows, cols);
        } catch (NumberFormatException ex) {
            showErrorMessage("يرجى إدخال أرقام صحيحة أكبر من 0");
        }
    }
});
    }//GEN-LAST:event_jButton5ActionPerformed
    private void openMatrixInputPanel(int numMatrices, int rows, int cols) {
    // التحقق من أن الأبعاد أكبر من صفر
    if (rows <= 0 || cols <= 0) {
        JOptionPane.showMessageDialog(null, "عدد الصفوف والأعمدة يجب أن يكون أكبر من الصفر.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return; // إنهاء الدالة إذا كانت الأبعاد غير صحيحة
    }

    JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
    matrixFrame.setSize(400, 400);

    // جعل نافذة الإطار تظهر في المنتصف
    matrixFrame.setLocationRelativeTo(null); 

    // إنشاء JPanel مع تخطيط GridLayout
    JPanel matrixPanel = new JPanel(new GridLayout(numMatrices, 1));

    // مصفوفة ثلاثية الأبعاد لحفظ الحقول لجميع المصفوفات
    JTextField[][][] matrixFields = new JTextField[numMatrices][rows][cols];
    for (int i = 0; i < numMatrices; i++) {
        JPanel singleMatrixPanel = new JPanel(new GridBagLayout()); // استخدام GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints();

        // حساب التسمية المناسبة بناءً على الفهرس i
        String labelName;
        if (i < 26) {
            // استخدام حرف أبجدي واحد للحالات من A إلى Z
            labelName = String.valueOf((char) ('A' + i));
        } else {
            // استخدام حرفين مكررين (مثل AA، BB، ...) للحالات الأكبر من Z
            char repeatedChar = (char) ('A' + (i - 26));
            labelName = String.valueOf(repeatedChar) + repeatedChar;
        }

        JLabel label = new JLabel("مصفوفة " + labelName); // تعيين التسمية المناسبة
        label.setHorizontalAlignment(SwingConstants.CENTER); // محاذاة التسمية في المنتصف

        // تعيين حجم الخط إلى 24 وجعله بخط عريض
        label.setFont(new Font("Arial", Font.BOLD, 24));

        // إعداد قيود GridBag لملء الصف
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = cols; // جعل التسمية تأخذ عرض كامل المصفوفة
        gbc.fill = GridBagConstraints.HORIZONTAL; // ملء المساحة الأفقية
        singleMatrixPanel.add(label, gbc); // إضافة التسمية في الأعلى

        // إنشاء حقول الإدخال لكل عنصر في المصفوفة
        for (int j = 0; j < rows; j++) {
            for (int k = 0; k < cols; k++) {
                matrixFields[i][j][k] = new JTextField(5);
                matrixFields[i][j][k].setPreferredSize(new Dimension(50, 25)); // تعيين الحجم المفضل
                gbc.gridx = k; // تعيين موضع الحقل
                gbc.gridy = j + 1; // تعيين الصف (بدءًا من الصف 1 بعد التسمية)
                gbc.gridwidth = 1; // جعل الحقل يأخذ عرض عمود واحد
                singleMatrixPanel.add(matrixFields[i][j][k], gbc); // إضافة حقول الإدخال
            }
        }
        matrixPanel.add(singleMatrixPanel); // إضافة المصفوفة إلى اللوحة الرئيسية
    }

    // إضافة JScrollPane لتوفير إمكانية التمرير
    JScrollPane scrollPane = new JScrollPane(matrixPanel);
    scrollPane.setPreferredSize(new Dimension(380, 300)); // تعيين الحجم المفضل لـ JScrollPane

    JButton subtractButton = new JButton("طرح المصفوفات");
    subtractButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            Double[][] resultMatrix = new Double[rows][cols]; // مصفوفة من النوع Double
            try {
                // حساب طرح القيم من جميع المصفوفات
                for (int i = 0; i < numMatrices; i++) {
                    for (int j = 0; j < rows; j++) {
                        for (int k = 0; k < cols; k++) {
                            // إذا كانت هذه هي المصفوفة الأولى، نأخذ القيم منها
                            if (i == 0) {
                                resultMatrix[j][k] = Double.parseDouble(matrixFields[i][j][k].getText());
                            } else {
                                // بالنسبة للمصفوفات الأخرى، نطرح القيم
                                resultMatrix[j][k] -= Double.parseDouble(matrixFields[i][j][k].getText());
                            }
                        }
                    }
                }
                displaySumMatrix21(resultMatrix); // عرض الناتج
                matrixFrame.dispose(); // إغلاق نافذة إدخال المصفوفات
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(scrollPane, BorderLayout.CENTER); // إضافة JScrollPane إلى الإطار
    matrixFrame.add(subtractButton, BorderLayout.SOUTH);
    matrixFrame.setVisible(true);
}


    
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
Font font = new Font("Arial", Font.PLAIN, 24);

JTextField numMatricesField = new JTextField(8);  // عرض متوسط
numMatricesField.setFont(font);

JTextField rowsField = new JTextField(8);  // إدخال عدد الصفوف بعرض متوسط
rowsField.setFont(font);

JTextField colsField = new JTextField(8);  // إدخال عدد الأعمدة بعرض متوسط
colsField.setFont(font);

JButton generateButton = new JButton("إنشاء المصفوفات");
generateButton.setFont(font);

panel.add(new JLabel("ادخل عدد المصفوفات:"));
panel.add(numMatricesField);
panel.add(new JLabel("ادخل عدد الصفوف:"));
panel.add(rowsField);
panel.add(new JLabel("ادخل عدد الأعمدة:"));
panel.add(colsField);
panel.add(generateButton);

JFrame inputFrame = new JFrame("إدخال عدد وحجم المصفوفات");
inputFrame.setSize(400, 200);
inputFrame.add(panel);

// جعل النافذة تظهر في المنتصف
inputFrame.setLocationRelativeTo(null);
inputFrame.setVisible(true);

generateButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            int numMatrices = Integer.parseInt(numMatricesField.getText());
            int rows = Integer.parseInt(rowsField.getText());
            int cols = Integer.parseInt(colsField.getText());

            if (numMatrices <= 0 || rows <= 0 || cols <= 0) {
                JOptionPane.showMessageDialog(null, "عدد المصفوفات، الصفوف والأعمدة يجب أن يكونوا أكبر من 0", "خطأ", JOptionPane.ERROR_MESSAGE);
                return; // عدم متابعة العملية إذا كانت الأبعاد غير صالحة
            }

            inputFrame.dispose(); // إغلاق نافذة الإدخال
            openMatrixInputPanel(numMatrices, rows, cols); // فتح نافذة إدخال المصفوفات
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة أكبر من 0", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    }
});


    }//GEN-LAST:event_jButton7ActionPerformed

    
    
//    private Object[][] savedMatrix = matrix;
private void openMatrixInputDialogForMultiplication() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(6);
    JTextField colsField = new JTextField(6);
    JTextField multiplierField = new JTextField(6);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("أدخل عدد الصفوف:"));
    panel.add(rowsField);
    panel.add(new JLabel("أدخل عدد الأعمدة:"));
    panel.add(colsField);
    panel.add(new JLabel("أدخل العدد للضرب فيه:"));
    panel.add(multiplierField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("حجم المصفوفة");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowsField.getText());
                int cols = Integer.parseInt(colsField.getText());
                double multiplier = Double.parseDouble(multiplierField.getText());

                if (rows <= 0 || cols <= 0) {
                    JOptionPane.showMessageDialog(null, "يجب أن تكون الأبعاد أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                inputFrame.dispose();
                openMatrixPanelForMultiplication(rows, cols, multiplier);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}
private String[][] stringMatrix;

Double[][] numericMatrix;

private void openMatrixPanelForMultiplication(int rows, int cols, double multiplier) {
    JFrame matrixFrame = new JFrame("إدخال القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];
    matrix = new String[rows][cols];  // مصفوفة للمتغيرات
    numericMatrix = new Double[rows][cols]; // مصفوفة للأرقام


    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ المصفوفة");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                // في الحلقة هذه نحفظ المدخلات في المصفوفات
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        String input = matrixFields[i][j].getText();
                        matrix[i][j] = input;  // حفظ المتغيرات والنصوص

                        // تحقق إذا كانت القيمة رقمية
                        try {
                            numericMatrix[i][j] = Double.parseDouble(input);  // حفظ الأرقام
                        } catch (NumberFormatException ex) {
                            numericMatrix[i][j] = null; // في حالة كانت قيمة غير رقمية
                        }
                    }
                }

                Double[][] resultMatrix = (Double[][]) multiplyMatrixByScalar(numericMatrix, (String[][]) matrix, multiplier);  // ضرب المصفوفة بالأرقام والمتغيرات
                displayResultMatrix(resultMatrix);
                matrixFrame.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال قيم صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}



private void askForModificationOrMultiplier() {
    if (matrix != null) {
        int option = JOptionPane.showConfirmDialog(null, "هل تريد تعديل المصفوفة الحالية؟", "تعديل المصفوفة", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            openMatrixPanelForModification();
        } else {
            askForMultiplier();
        }
    } else {
        JOptionPane.showMessageDialog(null, "لا توجد مصفوفة محفوظة. يرجى إنشاء مصفوفة جديدة.");
        openMatrixInputDialogForMultiplication();
    }
}

private void openMatrixPanelForModification() {
    int rows = matrix.length;
    int cols = matrix[0].length;
    JFrame matrixFrame = new JFrame("تعديل القيم في المصفوفة");
    matrixFrame.setSize(500, 500);

    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(String.valueOf(matrix[i][j]), 5);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton saveButton = new JButton("احفظ التعديلات");
    saveButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        matrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }
                matrixFrame.dispose(); // غلق النافذة بعد الحفظ
                askForMultiplier();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(saveButton, BorderLayout.SOUTH);
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void askForMultiplier() {
    try {
        Double multiplier = Double.parseDouble(JOptionPane.showInputDialog("أدخل العدد لضربه في المصفوفة:"));
        
        // التأكد من أن المصفوفة تحتوي على كل من الأرقام والمتغيرات
        if (numericMatrix == null || stringMatrix == null) {
            JOptionPane.showMessageDialog(null, "المصفوفات غير موجودة أو لم يتم تهيئتها.", "خطأ", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Object[][] resultMatrix = multiplyMatrixByScalar(numericMatrix, stringMatrix, multiplier);
        displayResultMatrix(resultMatrix);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "يرجى إدخال عدد صحيح", "خطأ", JOptionPane.ERROR_MESSAGE);
    }
}



private Object[][] multiplyMatrixByScalar(Double[][] numericMatrix, String[][] stringMatrix, double scalar) {
    int rows = numericMatrix.length;
    int cols = numericMatrix[0].length;
    Object[][] resultMatrix = new Object[rows][cols];  // تغيير إلى Object لدعم الأرقام والمتغيرات

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (numericMatrix[i][j] != null) {
                resultMatrix[i][j] = numericMatrix[i][j] * scalar;  // ضرب الأرقام
            } else {
                String cell = stringMatrix[i][j]; // التعامل مع المتغيرات مثل "x"
                if (isVariable(cell)) {
                    resultMatrix[i][j] = scalar + " * " + cell;  // نعرض "2x" مثلاً
                } else {
                    resultMatrix[i][j] = null;  // في حالة قيمة غير صالحة
                }
            }
        }
    }
    return resultMatrix;
}






private void displayResultMatrix(Object[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;

    JFrame resultFrame = new JFrame("نتيجة الضرب");
    resultFrame.setSize(500, 500);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(matrix[i][j]));
            resultField.setEditable(false);
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null);
    resultFrame.setVisible(true);
}



    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        JPanel panel = new JPanel(new FlowLayout());
    JButton newMatrixButton = new JButton("إنشاء مصفوفة جديدة");
    JButton existingMatrixButton = new JButton("استخدام المصفوفة الموجودة");

    panel.add(newMatrixButton);
    panel.add(existingMatrixButton);

    JFrame choiceFrame = new JFrame("اختيار المصفوفة");
    choiceFrame.setSize(300, 150);
    choiceFrame.add(panel);
    choiceFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    choiceFrame.setVisible(true);

    // إذا اختار إنشاء مصفوفة جديدة
    newMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            openMatrixInputDialogForMultiplication(); // فتح نافذة إدخال حجم المصفوفة
        }
    });

    // إذا اختار استخدام المصفوفة الموجودة
    existingMatrixButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            choiceFrame.dispose(); // إغلاق نافذة الاختيار
            if (matrix == null) {
                JOptionPane.showMessageDialog(null, "لا يوجد مصفوفة محفوظة. يُرجى إنشاء مصفوفة جديدة.");
                openMatrixInputDialogForMultiplication();
            } else {
                displayMatrix();
                askForModificationOrMultiplier(); // سؤال المستخدم
            }
        }
    });
    }//GEN-LAST:event_jButton9ActionPerformed
private void openMatrixMultiplicationInputDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowsField = new JTextField(5);
    JTextField colsField = new JTextField(5);
    JButton generateButton = new JButton("ضرب المصفوفتين");

    JLabel rowsLabel = new JLabel("عدد الصفوف للمصفوفة الأولى:", SwingConstants.CENTER);
    rowsLabel.setFont(new Font("Arial", Font.BOLD, 22));
    panel.add(rowsLabel);
    panel.add(rowsField);

    JLabel colsLabel = new JLabel("عدد الأعمدة للمصفوفة الأولى:", SwingConstants.CENTER);
    colsLabel.setFont(new Font("Arial", Font.BOLD, 22));
    panel.add(colsLabel);
    panel.add(colsField);

    generateButton.setFont(new Font("Arial", Font.BOLD, 22));
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("أبعاد المصفوفات");
    inputFrame.setSize(400, 200);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null);
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rowsA = Integer.parseInt(rowsField.getText());
                int colsA = Integer.parseInt(colsField.getText());

                if (rowsA <= 0 || colsA <= 0) {
                    JOptionPane.showMessageDialog(null, "يجب أن تكون الأبعاد أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int rowsB = colsA;
                int colsB = Integer.parseInt(JOptionPane.showInputDialog("ادخل عدد الأعمدة للمصفوفة الثانية:"));

                if (colsB <= 0) {
                    JOptionPane.showMessageDialog(null, "يجب أن يكون عدد الأعمدة للمصفوفة الثانية أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                inputFrame.dispose();
                openMatrixInputPanelsForMultiplication(rowsA, colsA, rowsB, colsB);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

private void openMatrixInputPanelsForMultiplication(int rowsA, int colsA, int rowsB, int colsB) {
    JFrame matrixFrame = new JFrame("إدخال القيم للمصفوفات");
    matrixFrame.setSize(500, 500);
    matrixFrame.setLocationRelativeTo(null);

    JPanel matrixPanel = new JPanel();
    matrixPanel.setLayout(new BoxLayout(matrixPanel, BoxLayout.Y_AXIS));

    JTextField[][] matrixAFields = new JTextField[rowsA][colsA];
    JTextField[][] matrixBFields = new JTextField[rowsB][colsB];

    JPanel matrixAPanel = new JPanel();
    matrixAPanel.setLayout(new BoxLayout(matrixAPanel, BoxLayout.Y_AXIS));

    JLabel labelA = new JLabel("مصفوفة A:", SwingConstants.CENTER);
    labelA.setFont(new Font("Arial", Font.BOLD, 22));
    matrixAPanel.add(labelA);

    JPanel matrixAGridPanel = new JPanel(new GridLayout(rowsA, colsA, 5, 5));
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsA; j++) {
            matrixAFields[i][j] = new JTextField(5);
            matrixAFields[i][j].setFont(new Font("Arial", Font.PLAIN, 22));
            matrixAFields[i][j].setHorizontalAlignment(SwingConstants.CENTER);
            matrixAGridPanel.add(matrixAFields[i][j]);
        }
    }
    matrixAPanel.add(matrixAGridPanel);

    JPanel matrixBPanel = new JPanel();
    matrixBPanel.setLayout(new BoxLayout(matrixBPanel, BoxLayout.Y_AXIS));

    JLabel labelB = new JLabel("مصفوفة B:", SwingConstants.CENTER);
    labelB.setFont(new Font("Arial", Font.BOLD, 22));
    matrixBPanel.add(labelB);

    JPanel matrixBGridPanel = new JPanel(new GridLayout(rowsB, colsB, 5, 5));
    for (int i = 0; i < rowsB; i++) {
        for (int j = 0; j < colsB; j++) {
            matrixBFields[i][j] = new JTextField(5);
            matrixBFields[i][j].setFont(new Font("Arial", Font.PLAIN, 22));
            matrixBFields[i][j].setHorizontalAlignment(SwingConstants.CENTER);
            matrixBGridPanel.add(matrixBFields[i][j]);
        }
    }
    matrixBPanel.add(matrixBGridPanel);

    matrixPanel.add(matrixAPanel);
    matrixPanel.add(matrixBPanel);

    JButton multiplyButton = new JButton("ضرب المصفوفتين");
    multiplyButton.setFont(new Font("Arial", Font.BOLD, 22));
    multiplyButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String[][] matrixA = new String[rowsA][colsA];
            String[][] matrixB = new String[rowsB][colsB];
            String[][] resultMatrix = new String[rowsA][colsB];

            try {
                // تعبئة المصفوفة A
                for (int i = 0; i < rowsA; i++) {
                    for (int j = 0; j < colsA; j++) {
                        matrixA[i][j] = matrixAFields[i][j].getText();
                    }
                }

                // تعبئة المصفوفة B
                for (int i = 0; i < rowsB; i++) {
                    for (int j = 0; j < colsB; j++) {
                        matrixB[i][j] = matrixBFields[i][j].getText();
                    }
                }

                // عملية ضرب المصفوفات
                for (int i = 0; i < rowsA; i++) {
                    for (int j = 0; j < colsB; j++) {
                        resultMatrix[i][j] = "0"; // تهيئة النتيجة

                        for (int k = 0; k < colsA; k++) {
                            resultMatrix[i][j] = addTerms(resultMatrix[i][j], multiplyTerms(matrixA[i][k], matrixB[k][j]));
                        }
                    }
                }

                // استدعاء دالة عرض الناتج
                displayResultMatrix(resultMatrix, rowsA, colsB);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال قيم صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(multiplyButton, BorderLayout.SOUTH);
    matrixFrame.setVisible(true);
}

private String multiplyTerms(String term1, String term2) {
    // إزالة المسافات الإضافية
    term1 = term1.trim();
    term2 = term2.trim();

    // إذا كان أحد المصطلحين "0"، النتيجة دائمًا "0"
    if (term1.equals("0") || term2.equals("0")) return "0";

    // إذا كان كلا المصطلحين عبارة عن أرقام فقط
    if (term1.matches("-?\\d+(\\.\\d+)?") && term2.matches("-?\\d+(\\.\\d+)?")) {
        return String.valueOf(Double.parseDouble(term1) * Double.parseDouble(term2));
    }

    // إذا كان أحدهما رقم والآخر يحتوي على متغير
    if (term1.matches("-?\\d+(\\.\\d+)?") && term2.matches(".*[a-zA-Z].*")) {
        double num = Double.parseDouble(term1); // الرقم
        return multiplyNumberWithVariable(num, term2);
    }
    if (term2.matches("-?\\d+(\\.\\d+)?") && term1.matches(".*[a-zA-Z].*")) {
        double num = Double.parseDouble(term2); // الرقم
        return multiplyNumberWithVariable(num, term1);
    }

    // إذا كان كلا المصطلحين يحتويان على متغيرات
    if (term1.matches(".*[a-zA-Z].*") && term2.matches(".*[a-zA-Z].*")) {
        // افتراض أن النتيجة ضرب متغيرين معًا
        return "(" + term1 + ")*(" + term2 + ")";
    }

    return term1 + "*" + term2; // نتيجة افتراضية
}

// دالة مساعدة للتعامل مع ضرب رقم مع متغير
private String multiplyNumberWithVariable(double num, String variable) {
    variable = variable.trim();

    // التحقق من وجود معامل أمام المتغير
    if (variable.matches("-?\\d+(\\.\\d+)?[a-zA-Z]")) {
        // فصل الرقم عن المتغير
        String coefficient = variable.replaceAll("[a-zA-Z]", "");
        String varPart = variable.replaceAll("[\\d.-]", "");
        double multipliedCoefficient = num * Double.parseDouble(coefficient);
        return multipliedCoefficient + varPart;
    }

    // إذا كان المتغير فقط دون معامل
    return num + variable;
}





private void displayResultMatrix(Object[][] resultMatrix, int rows, int cols) {
    if (resultCount >= results.length) {
        showErrorMessage("لا يمكن حفظ نتائج إضافية. حجم مصفوفة النتائج ممتلئ.");
        return;
    }

    results[resultCount] = resultMatrix;
    resultCount++;

    JFrame resultFrame = new JFrame("نتيجة الضرب");
    resultFrame.setSize(400, 400);
    resultFrame.setLocationRelativeTo(null);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    resultPanel.setBackground(Color.BLACK);
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.valueOf(resultMatrix[i][j]));
            resultField.setEditable(false);
            resultField.setPreferredSize(new Dimension(25, 25));
            resultField.setHorizontalAlignment(SwingConstants.CENTER);
            resultField.setBackground(Color.BLACK);
            resultField.setForeground(Color.WHITE);
            resultPanel.add(resultField);
        }
    }

    JPanel buttonPanel = new JPanel(new FlowLayout());

    if (rows == cols) {
        JButton determinantButton = new JButton("احسب المحدد");
        determinantButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object determinant = calculateDeterminant2(resultMatrix);
                showResult2("قيمة المحدد هي: " + determinant, "المحدد");
            }
        });
        buttonPanel.add(determinantButton);

        JButton inverseButton = new JButton("احسب المعكوس");
        inverseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Object[][] inverseMatrix = invertMatrix0(resultMatrix);
                    resultFrame.dispose();
                    displayResultMatrix(inverseMatrix, rows, cols);
                } catch (ArithmeticException ex) {
                    resultFrame.dispose();
                    showErrorMessage("لا يمكن حساب المعكوس. المحدد يساوي صفر.");
                }
            }
        });
        buttonPanel.add(inverseButton);
    } else {
        JButton transposeButton = new JButton("احسب المقلوب");
        transposeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object[][] transposedMatrix = transposeMatrix0(resultMatrix);
                resultFrame.dispose();
                displayResultMatrix(transposedMatrix, cols, rows);
            }
        });
        buttonPanel.add(transposeButton);
    }

    resultFrame.setLayout(new BorderLayout());
    resultFrame.add(resultPanel, BorderLayout.CENTER);
    resultFrame.add(buttonPanel, BorderLayout.SOUTH);
    resultFrame.setVisible(true);
}




private void showResult2(String message, String title) {
    JTextArea resultArea = new JTextArea(message);
    resultArea.setEditable(false);
    resultArea.setBackground(Color.BLACK);
    resultArea.setForeground(Color.WHITE);
    JScrollPane scrollPane = new JScrollPane(resultArea);
    scrollPane.setPreferredSize(new Dimension(300, 100));
    JOptionPane.showMessageDialog(null, scrollPane, title, JOptionPane.INFORMATION_MESSAGE); // توسيط الرسالة
}


    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        openMatrixMultiplicationInputDialog();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    


// دالة لعرض الخيارات
private void showMatrixOptionsDialog1() {
    // إعداد الخيارين
    String[] options = {"العمل على المصفوفة الحالية", "إنشاء مصفوفة جديدة"};
    int choice = JOptionPane.showOptionDialog(
            this,
            "اختر الخيار الذي ترغب فيه:",
            "اختيار المصفوفة",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
    );

    // تنفيذ الإجراء بناءً على الخيار
    if (choice == 0) {
        // العمل على المصفوفة الحالية
        if (matrix != null && matrix.length > 0) {
            showCurrentMatrixForConfirmation();
        } else {
            JOptionPane.showMessageDialog(this, "لا توجد مصفوفة حالية.", "خطأ", JOptionPane.ERROR_MESSAGE);
        }
    } else if (choice == 1) {
        // إنشاء مصفوفة جديدة
        openMatrixInputForTransposeDialog();
    }
}

private void showCurrentMatrixForConfirmation() {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
        JOptionPane.showMessageDialog(this, "لا توجد مصفوفة حالياً للعمل عليها.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int rows = matrix.length;
    int cols = matrix[0].length;

    // التحقق من أن المصفوفة مربعة (عدد الصفوف يساوي عدد الأعمدة)
    if (rows != cols) {
        JOptionPane.showMessageDialog(this, "المصفوفة يجب أن تكون مربعة لحساب المقلوب.", "خطأ", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // إنشاء إطار جديد لعرض المصفوفة
    JFrame matrixFrame = new JFrame("المصفوفة الحالية");
    JPanel matrixPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    JTextField[][] matrixFields = new JTextField[rows][cols];

    // إضافة حقول النص لعرض القيم
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(String.format("%.2f", (Double) matrix[i][j]), 5);
            matrixFields[i][j].setEditable(false);
            matrixFields[i][j].setHorizontalAlignment(SwingConstants.CENTER);
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    int fieldSize = 50;
    matrixPanel.setPreferredSize(new Dimension(cols * fieldSize, rows * fieldSize));

    // زر للتأكيد
    JButton confirmButton = new JButton("تأكيد");
    confirmButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            matrixFrame.dispose();
            try {
                // التأكد من أن المصفوفة مربعة قبل محاولة حساب المقلوب
                if (rows != cols) {
                    JOptionPane.showMessageDialog(matrixFrame, "المصفوفة يجب أن تكون مربعة لحساب المقلوب.", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Object[][] transposedMatrix = transposeMatrix8(matrix); // حساب المقلوب
                animateTranspose(matrixPanel, matrixFields, transposedMatrix); // تنفيذ التأثير
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(matrixFrame, "لا يمكن حساب المقلوب، تأكد أن المصفوفة مربعة.", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    matrixFrame.add(matrixPanel, BorderLayout.CENTER);
    matrixFrame.add(confirmButton, BorderLayout.SOUTH);
    matrixFrame.pack();
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}



// دالة إدخال حجم المصفوفة الجديدة
private void openMatrixInputForTransposeDialog() {
    JPanel panel = new JPanel(new FlowLayout());
    JTextField rowField = new JTextField(5);
    JTextField colField = new JTextField(5);
    JButton generateButton = new JButton("إنشاء");

    panel.add(new JLabel("عدد الصفوف:"));
    panel.add(rowField);
    panel.add(new JLabel("عدد الأعمدة:"));
    panel.add(colField);
    panel.add(generateButton);

    JFrame inputFrame = new JFrame("إدخال حجم المصفوفة");
    inputFrame.setSize(300, 150);
    inputFrame.add(panel);
    inputFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    inputFrame.setVisible(true);

    generateButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int rows = Integer.parseInt(rowField.getText());
                int cols = Integer.parseInt(colField.getText());

                // تحقق من أن الأبعاد أكبر من الصفر
                if (rows <= 0 || cols <= 0) {
                    JOptionPane.showMessageDialog(null, "يجب أن تكون الأبعاد أكبر من الصفر", "خطأ", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                inputFrame.dispose(); // أغلق نافذة الإدخال إذا كانت الأبعاد صالحة
                openMatrixPanelForTranspose(rows, cols); // فتح نافذة إدخال القيم بناءً على الأبعاد
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "يرجى إدخال أرقام صحيحة للصفوف والأعمدة", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
}

// دالة إدخال القيم في المصفوفة
private JFrame matrixFrame; // إطار لتخزين الإطار الحالي للمصفوفة

// دالة إدخال القيم في المصفوفة
private void openMatrixPanelForTranspose(int rows, int cols) {
    // إذا كان هناك إطار مفتوح حاليًا، قم بإغلاقه قبل إنشاء إطار جديد
    if (matrixFrame != null && matrixFrame.isVisible()) {
        matrixFrame.dispose();
    }

    matrixFrame = new JFrame("إدخال القيم في المصفوفة"); // تعيين إطار جديد
    JPanel matrixPanel = new JPanel(null); // استخدم null Layout لتمكين التحريك اليدوي
    JTextField[][] matrixFields = new JTextField[rows][cols];

    int fieldSize = 100; // تكبير حجم مربعات النص إلى الضعف
    matrixPanel.setPreferredSize(new Dimension(cols * fieldSize, rows * fieldSize));

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrixFields[i][j] = new JTextField(5);
            matrixFields[i][j].setBounds(j * fieldSize, i * fieldSize, fieldSize, fieldSize); // تعيين الموقع والحجم الجديد لكل عنصر
            matrixFields[i][j].setHorizontalAlignment(SwingConstants.CENTER); // توسيط النص داخل المربع
            matrixFields[i][j].setFont(new Font("Arial", Font.PLAIN, 24)); // تكبير حجم النص إلى الضعف
            matrixPanel.add(matrixFields[i][j]);
        }
    }

    JButton transposeButton = new JButton("احصل على المقلوب");
    transposeButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                Object[][] originalMatrix = new Object[rows][cols];
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        originalMatrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
                    }
                }

                // إعداد التأثير البصري
                Object[][] transposedMatrix = transposeMatrix8(originalMatrix);
                animateTranspose(matrixPanel, matrixFields, transposedMatrix);

                // تحديث حجم اللوحة ليعكس الأبعاد الجديدة
                matrixPanel.setPreferredSize(new Dimension(rows * fieldSize, cols * fieldSize));
                matrixPanel.revalidate();
                matrixPanel.repaint();

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(matrixFrame, "يرجى إدخال أرقام صحيحة فقط", "خطأ", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    JScrollPane scrollPane = new JScrollPane(matrixPanel);
    scrollPane.setPreferredSize(new Dimension(Math.min(600, cols * fieldSize), Math.min(600, rows * fieldSize))); // تكيف اللوحة حسب حجم المصفوفة
    matrixFrame.add(scrollPane, BorderLayout.CENTER);
    matrixFrame.add(transposeButton, BorderLayout.SOUTH);
    matrixFrame.pack();
    matrixFrame.setLocationRelativeTo(null);
    matrixFrame.setVisible(true);
}

private void animateTranspose(JPanel matrixPanel, JTextField[][] matrixFields, Object[][] transposedMatrix) {
    int rows = matrixFields.length;
    int cols = matrixFields[0].length;
    int fieldSize = 100;

    Timer timer = new Timer(10, null); // إنشاء مؤقت مع فترة زمنية قصيرة للتحريك
    timer.addActionListener(new ActionListener() {
        int step = 0; // عدد خطوات التحريك
        final int maxSteps = 20; // عدد الخطوات الكلي للتحريك

        @Override
        public void actionPerformed(ActionEvent e) {
            boolean finished = true;

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    int targetX = j * fieldSize;
                    int targetY = i * fieldSize;

                    int transposedX = i * fieldSize; // الموقع المستهدف بعد المقلوب
                    int transposedY = j * fieldSize;

                    // الموقع الحالي للعنصر
                    int currentX = matrixFields[i][j].getX();
                    int currentY = matrixFields[i][j].getY();

                    // حساب الإزاحة في كل خطوة
                    int newX = currentX + (transposedX - currentX) / (maxSteps - step);
                    int newY = currentY + (transposedY - currentY) / (maxSteps - step);

                    // تعيين الموقع الجديد للعنصر
                    matrixFields[i][j].setLocation(newX, newY);

                    // تعيين القيم الجديدة بعد التحريك
                    if (step == maxSteps - 1) {
                        matrixFields[i][j].setText(String.format("%.2f", transposedMatrix[i][j]));
                    }

                    // التحقق من إنهاء الحركة
                    if (newX != transposedX || newY != transposedY) {
                        finished = false;
                    }
                }
            }

            step++;
            if (finished || step >= maxSteps) {
                timer.stop();
            }

            matrixPanel.revalidate();
            matrixPanel.repaint();
        }
    });

    timer.start();
}

private boolean isTransposed = false; // تتبع حالة المصفوفة

private void toggleTranspose(JPanel matrixPanel, JTextField[][] matrixFields) {
    int rows = matrixFields.length;
    int cols = matrixFields[0].length;

    // إنشاء نسخة من المصفوفة لاستخدامها في التبديل
    Object[][] originalMatrix = new Object[rows][cols];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            originalMatrix[i][j] = Double.parseDouble(matrixFields[i][j].getText());
        }
    }

    Object[][] targetMatrix = isTransposed ? originalMatrix : transposeMatrix8(originalMatrix); // التبديل بين الأصل والمقلوب

    animateToggle(matrixPanel, matrixFields, targetMatrix);
    isTransposed = !isTransposed; // تبديل الحالة
}

private void animateToggle(JPanel matrixPanel, JTextField[][] matrixFields, Object[][] targetMatrix) {
    int rows = matrixFields.length;
    int cols = matrixFields[0].length;
    int fieldSize = 100;

    Timer timer = new Timer(20, null); 
    timer.addActionListener(new ActionListener() {
        int step = 0;
        final int maxSteps = 20;

        @Override
        public void actionPerformed(ActionEvent e) {
            boolean finished = true;

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    int targetX = isTransposed ? i * fieldSize : j * fieldSize; // الموقع بناءً على الحالة
                    int targetY = isTransposed ? j * fieldSize : i * fieldSize;

                    int currentX = matrixFields[i][j].getX();
                    int currentY = matrixFields[i][j].getY();

                    if (Math.abs(currentX - targetX) > 1) {
                        currentX += (targetX - currentX) / Math.max(1, maxSteps - step);
                        finished = false;
                    } else {
                        currentX = targetX;
                    }
                    
                    if (Math.abs(currentY - targetY) > 1) {
                        currentY += (targetY - currentY) / Math.max(1, maxSteps - step);
                        finished = false;
                    } else {
                        currentY = targetY;
                    }

                    matrixFields[i][j].setLocation(currentX, currentY);

                    if (finished && step >= maxSteps - 1) {
                        matrixFields[i][j].setText(String.format("%.2f", targetMatrix[i][j]));
                    }
                }
            }

            step++;
            if (finished || step >= maxSteps) {
                timer.stop();
            }

            matrixPanel.revalidate();
            matrixPanel.repaint();
        }
    });

    timer.start();
}


private Object[][] transposeMatrix8(Object[][] matrix) {
    int rows = matrix.length;
    int cols = matrix[0].length;
    Object[][] transposedMatrix = new Object[cols][rows];

    // تبديل الصفوف والأعمدة
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }
    return transposedMatrix;
}

private void displayResultMatrix2(Object[][] resultMatrix) {
    // تحقق من وجود مساحة كافية لحفظ النتيجة في مصفوفة النتائج ثلاثية الأبعاد
    if (resultCount >= results.length) {
        showErrorMessage("لا يمكن حفظ نتائج إضافية. حجم مصفوفة النتائج ممتلئ.");
        return;
    }

    // حفظ مصفوفة النتيجة في المصفوفة ثلاثية الأبعاد
    results[resultCount] = resultMatrix;
    resultCount++;

    // باقي الكود لعرض مصفوفة النتيجة في نافذة جديدة
    int rows = resultMatrix.length;
    int cols = resultMatrix[0].length;

    JFrame resultFrame = new JFrame("مصفوفة المعكوس");
    resultFrame.setSize(400, 400);

    JPanel resultPanel = new JPanel(new GridLayout(rows, cols, 5, 5));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            JTextField resultField = new JTextField(String.format("%.4f", resultMatrix[i][j]));
            resultField.setEditable(false);
            resultField.setHorizontalAlignment(SwingConstants.CENTER); // توسيط النص
            resultPanel.add(resultField);
        }
    }

    resultFrame.add(resultPanel);
    resultFrame.setLocationRelativeTo(null); // وضع النافذة في منتصف الشاشة
    resultFrame.setVisible(true);
}

    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        showMatrixOptionsDialog1();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void infobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infobtnActionPerformed
        
    }//GEN-LAST:event_infobtnActionPerformed

    
    
    private void infobtnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_infobtnMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_infobtnMouseWheelMoved

    private void lgninfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgninfoActionPerformed
        parent.removeAll();
        parent.add(mainpanel);
        parent.repaint();
        parent.revalidate();
    }//GEN-LAST:event_lgninfoActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Fmatcalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    // Create and display the form
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            Fmatcalc frame = new Fmatcalc();
            frame.setVisible(true);
            // Center the frame on the screen
            frame.setSize(490, 398); // Set your desired size here
            frame.setLocationRelativeTo(null); // Center the frame
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Ope;
    private javax.swing.JButton createmat;
    private javax.swing.JButton createmat1;
    private javax.swing.JButton infobtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lgninfo;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPanel parent;
    // End of variables declaration//GEN-END:variables

    

private void showMessage(String message) {
    JOptionPane.showMessageDialog(this, message, "خطأ", JOptionPane.ERROR_MESSAGE);
}}
